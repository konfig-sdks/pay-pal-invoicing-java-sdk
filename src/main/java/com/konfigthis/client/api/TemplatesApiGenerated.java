/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.Template;
import com.konfigthis.client.model.TemplateInfo;
import com.konfigthis.client.model.TemplateSettings;
import com.konfigthis.client.model.Templates;
import com.konfigthis.client.model.UnitOfMeasure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTemplateCall(Template template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = template;

        // create path and map variables
        String localVarPath = "/v2/invoicing/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateValidateBeforeCall(Template template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling createTemplate(Async)");
        }

        return createTemplateCall(template, _callback);

    }


    private ApiResponse<Template> createTemplateWithHttpInfo(Template template) throws ApiException {
        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(template, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTemplateAsync(Template template, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(template, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTemplateRequestBuilder {
        private String id;
        private String name;
        private Boolean defaultTemplate;
        private TemplateInfo templateInfo;
        private TemplateSettings settings;
        private UnitOfMeasure unitOfMeasure;
        private Boolean standardTemplate;
        private List<LinkDescription> links;

        private CreateTemplateRequestBuilder() {
        }

        /**
         * Set id
         * @param id The ID of the template. (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name The template name.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The template name must be unique.&lt;/blockquote&gt; (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set defaultTemplate
         * @param defaultTemplate Indicates whether this template is the default template. A invoicer can have one default template. (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder defaultTemplate(Boolean defaultTemplate) {
            this.defaultTemplate = defaultTemplate;
            return this;
        }
        
        /**
         * Set templateInfo
         * @param templateInfo  (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder templateInfo(TemplateInfo templateInfo) {
            this.templateInfo = templateInfo;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder settings(TemplateSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set unitOfMeasure
         * @param unitOfMeasure  (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder unitOfMeasure(UnitOfMeasure unitOfMeasure) {
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }
        
        /**
         * Set standardTemplate
         * @param standardTemplate Indicates whether this template is a invoicer-created custom template. The system generates non-custom templates. (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder standardTemplate(Boolean standardTemplate) {
            this.standardTemplate = standardTemplate;
            return this;
        }
        
        /**
         * Set links
         * @param links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder links(List<LinkDescription> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for createTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Template template = buildBodyParams();
            return createTemplateCall(template, _callback);
        }

        private Template buildBodyParams() {
            Template template = new Template();
            template.id(this.id);
            template.name(this.name);
            template.defaultTemplate(this.defaultTemplate);
            template.templateInfo(this.templateInfo);
            template.settings(this.settings);
            template.unitOfMeasure(this.unitOfMeasure);
            template.standardTemplate(this.standardTemplate);
            template.links(this.links);
            return template;
        }

        /**
         * Execute createTemplate request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            Template template = buildBodyParams();
            ApiResponse<Template> localVarResp = createTemplateWithHttpInfo(template);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTemplate request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            Template template = buildBodyParams();
            return createTemplateWithHttpInfo(template);
        }

        /**
         * Execute createTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            Template template = buildBodyParams();
            return createTemplateAsync(template, _callback);
        }
    }

    /**
     * Create template
     * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes &#x60;Quantity&#x60;, &#x60;Hours&#x60;, and &#x60;Amount&#x60;.&lt;/blockquote&gt;
     * @param template  (required)
     * @return CreateTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTemplateRequestBuilder createTemplate() throws IllegalArgumentException {
        return new CreateTemplateRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteById(Async)");
        }

        return deleteByIdCall(templateId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String templateId;

        private DeleteByIdRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(templateId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(templateId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(templateId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(templateId, _callback);
        }
    }

    /**
     * Delete template
     * Deletes a template, by ID.
     * @param templateId The ID of the template to delete. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(templateId);
    }
    private okhttp3.Call listDetailsCall(String fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDetailsValidateBeforeCall(String fields, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listDetailsCall(fields, page, pageSize, _callback);

    }


    private ApiResponse<Templates> listDetailsWithHttpInfo(String fields, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(fields, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Templates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDetailsAsync(String fields, Integer page, Integer pageSize, final ApiCallback<Templates> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(fields, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Templates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDetailsRequestBuilder {
        private String fields;
        private Integer page;
        private Integer pageSize;

        private ListDetailsRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields The fields to return in the response. Value is &#x60;all&#x60; or &#x60;none&#x60;. To return only the template name, ID, and default attributes, specify &#x60;none&#x60;. (optional, default to all)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates. (optional, default to 1)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The maximum number of templates to return in the response. (optional, default to 20)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDetailsCall(fields, page, pageSize, _callback);
        }


        /**
         * Execute listDetails request
         * @return Templates
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Templates execute() throws ApiException {
            ApiResponse<Templates> localVarResp = listDetailsWithHttpInfo(fields, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDetails request with HTTP info returned
         * @return ApiResponse&lt;Templates&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Templates> executeWithHttpInfo() throws ApiException {
            return listDetailsWithHttpInfo(fields, page, pageSize);
        }

        /**
         * Execute listDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Templates> _callback) throws ApiException {
            return listDetailsAsync(fields, page, pageSize, _callback);
        }
    }

    /**
     * List templates
     * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user&#39;s PayPal profile.&lt;br/&gt;The user can select which values to show in the business information section of their template.
     * @return ListDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ListDetailsRequestBuilder listDetails() throws IllegalArgumentException {
        return new ListDetailsRequestBuilder();
    }
    private okhttp3.Call showDetailsByIdCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsByIdValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling showDetailsById(Async)");
        }

        return showDetailsByIdCall(templateId, _callback);

    }


    private ApiResponse<Template> showDetailsByIdWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = showDetailsByIdValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsByIdAsync(String templateId, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsByIdValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsByIdRequestBuilder {
        private final String templateId;

        private ShowDetailsByIdRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for showDetailsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows template details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsByIdCall(templateId, _callback);
        }


        /**
         * Execute showDetailsById request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows template details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            ApiResponse<Template> localVarResp = showDetailsByIdWithHttpInfo(templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetailsById request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows template details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            return showDetailsByIdWithHttpInfo(templateId);
        }

        /**
         * Execute showDetailsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows template details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            return showDetailsByIdAsync(templateId, _callback);
        }
    }

    /**
     * Show template details
     * Shows details for a template, by ID.
     * @param templateId The ID of the template to delete. (required)
     * @return ShowDetailsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows template details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsByIdRequestBuilder showDetailsById(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new ShowDetailsByIdRequestBuilder(templateId);
    }
    private okhttp3.Call updateFullTemplateCall(String templateId, Template template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = template;

        // create path and map variables
        String localVarPath = "/v2/invoicing/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFullTemplateValidateBeforeCall(String templateId, Template template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateFullTemplate(Async)");
        }

        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling updateFullTemplate(Async)");
        }

        return updateFullTemplateCall(templateId, template, _callback);

    }


    private ApiResponse<Template> updateFullTemplateWithHttpInfo(String templateId, Template template) throws ApiException {
        okhttp3.Call localVarCall = updateFullTemplateValidateBeforeCall(templateId, template, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFullTemplateAsync(String templateId, Template template, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFullTemplateValidateBeforeCall(templateId, template, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFullTemplateRequestBuilder {
        private final String templateId;
        private String id;
        private String name;
        private Boolean defaultTemplate;
        private TemplateInfo templateInfo;
        private TemplateSettings settings;
        private UnitOfMeasure unitOfMeasure;
        private Boolean standardTemplate;
        private List<LinkDescription> links;

        private UpdateFullTemplateRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Set id
         * @param id The ID of the template. (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name The template name.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The template name must be unique.&lt;/blockquote&gt; (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set defaultTemplate
         * @param defaultTemplate Indicates whether this template is the default template. A invoicer can have one default template. (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder defaultTemplate(Boolean defaultTemplate) {
            this.defaultTemplate = defaultTemplate;
            return this;
        }
        
        /**
         * Set templateInfo
         * @param templateInfo  (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder templateInfo(TemplateInfo templateInfo) {
            this.templateInfo = templateInfo;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder settings(TemplateSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set unitOfMeasure
         * @param unitOfMeasure  (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder unitOfMeasure(UnitOfMeasure unitOfMeasure) {
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }
        
        /**
         * Set standardTemplate
         * @param standardTemplate Indicates whether this template is a invoicer-created custom template. The system generates non-custom templates. (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder standardTemplate(Boolean standardTemplate) {
            this.standardTemplate = standardTemplate;
            return this;
        }
        
        /**
         * Set links
         * @param links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). (optional)
         * @return UpdateFullTemplateRequestBuilder
         */
        public UpdateFullTemplateRequestBuilder links(List<LinkDescription> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updateFullTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Template template = buildBodyParams();
            return updateFullTemplateCall(templateId, template, _callback);
        }

        private Template buildBodyParams() {
            Template template = new Template();
            template.id(this.id);
            template.name(this.name);
            template.defaultTemplate(this.defaultTemplate);
            template.templateInfo(this.templateInfo);
            template.settings(this.settings);
            template.unitOfMeasure(this.unitOfMeasure);
            template.standardTemplate(this.standardTemplate);
            template.links(this.links);
            return template;
        }

        /**
         * Execute updateFullTemplate request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            Template template = buildBodyParams();
            ApiResponse<Template> localVarResp = updateFullTemplateWithHttpInfo(templateId, template);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFullTemplate request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            Template template = buildBodyParams();
            return updateFullTemplateWithHttpInfo(templateId, template);
        }

        /**
         * Execute updateFullTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            Template template = buildBodyParams();
            return updateFullTemplateAsync(templateId, template, _callback);
        }
    }

    /**
     * Fully update template
     * Fully updates a template, by ID. In the JSON request body, include a complete &#x60;template&#x60; object. This call does not support partial updates.
     * @param templateId The ID of the template to delete. (required)
     * @param template A representation of changes to make in the template. (required)
     * @return UpdateFullTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows template details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFullTemplateRequestBuilder updateFullTemplate(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateFullTemplateRequestBuilder(templateId);
    }
}
