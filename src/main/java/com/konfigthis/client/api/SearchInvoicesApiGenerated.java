/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AmountRange;
import com.konfigthis.client.model.DateRange;
import com.konfigthis.client.model.DateTimeRange;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.Invoices;
import com.konfigthis.client.model.SearchData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchInvoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchInvoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchInvoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listCall(Integer page, Integer pageSize, Boolean totalRequired, SearchData searchData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchData;

        // create path and map variables
        String localVarPath = "/v2/invoicing/search-invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (totalRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_required", totalRequired));
        }

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer page, Integer pageSize, Boolean totalRequired, SearchData searchData, final ApiCallback _callback) throws ApiException {
        return listCall(page, pageSize, totalRequired, searchData, _callback);

    }


    private ApiResponse<Invoices> listWithHttpInfo(Integer page, Integer pageSize, Boolean totalRequired, SearchData searchData) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(page, pageSize, totalRequired, searchData, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer page, Integer pageSize, Boolean totalRequired, SearchData searchData, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(page, pageSize, totalRequired, searchData, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String recipientEmail;
        private String recipientFirstName;
        private String recipientLastName;
        private String recipientBusinessName;
        private String invoiceNumber;
        private List<InvoiceStatus> status;
        private String reference;
        private String currencyCode;
        private String memo;
        private AmountRange totalAmountRange;
        private DateRange invoiceDateRange;
        private DateRange dueDateRange;
        private DateTimeRange paymentDateRange;
        private DateTimeRange creationDateRange;
        private Boolean archived;
        private List<String> fields;
        private Integer page;
        private Integer pageSize;
        private Boolean totalRequired;

        private ListRequestBuilder() {
        }

        /**
         * Set recipientEmail
         * @param recipientEmail Filters the search by the email address. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder recipientEmail(String recipientEmail) {
            this.recipientEmail = recipientEmail;
            return this;
        }
        
        /**
         * Set recipientFirstName
         * @param recipientFirstName Filters the search by the recipient first name. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder recipientFirstName(String recipientFirstName) {
            this.recipientFirstName = recipientFirstName;
            return this;
        }
        
        /**
         * Set recipientLastName
         * @param recipientLastName Filters the search by the recipient last name. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder recipientLastName(String recipientLastName) {
            this.recipientLastName = recipientLastName;
            return this;
        }
        
        /**
         * Set recipientBusinessName
         * @param recipientBusinessName Filters the search by the recipient business name. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder recipientBusinessName(String recipientBusinessName) {
            this.recipientBusinessName = recipientBusinessName;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber Filters the search by the invoice number. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set status
         * @param status An array of status values. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(List<InvoiceStatus> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set reference
         * @param reference The reference data, such as a PO number. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder reference(String reference) {
            this.reference = reference;
            return this;
        }
        
        /**
         * Set currencyCode
         * @param currencyCode The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Set memo
         * @param memo A private bookkeeping memo for the user. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Set totalAmountRange
         * @param totalAmountRange  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder totalAmountRange(AmountRange totalAmountRange) {
            this.totalAmountRange = totalAmountRange;
            return this;
        }
        
        /**
         * Set invoiceDateRange
         * @param invoiceDateRange  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder invoiceDateRange(DateRange invoiceDateRange) {
            this.invoiceDateRange = invoiceDateRange;
            return this;
        }
        
        /**
         * Set dueDateRange
         * @param dueDateRange  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dueDateRange(DateRange dueDateRange) {
            this.dueDateRange = dueDateRange;
            return this;
        }
        
        /**
         * Set paymentDateRange
         * @param paymentDateRange  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder paymentDateRange(DateTimeRange paymentDateRange) {
            this.paymentDateRange = paymentDateRange;
            return this;
        }
        
        /**
         * Set creationDateRange
         * @param creationDateRange  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder creationDateRange(DateTimeRange creationDateRange) {
            this.creationDateRange = creationDateRange;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Indicates whether to list merchant-archived invoices in the response. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. Response lists only merchant-archived invoices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. Response lists only unarchived invoices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;null&lt;/code&gt;. Response lists all invoices.&lt;/li&gt;&lt;/ul&gt; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A CSV file of fields to return for the user, if available. Because the invoice object can be very large, field filtering is required. Valid collection fields are &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;payments&lt;/code&gt;, &lt;code&gt;refunds&lt;/code&gt;, &lt;code&gt;additional_recipients_info&lt;/code&gt;, and &lt;code&gt;attachments&lt;/code&gt;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates. (optional, default to 1)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The maximum number of templates to return in the response. (optional, default to 20)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set totalRequired
         * @param totalRequired Indicates whether the to show &lt;code&gt;total_pages&lt;/code&gt; and &lt;code&gt;total_items&lt;/code&gt; in the response. (optional, default to false)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder totalRequired(Boolean totalRequired) {
            this.totalRequired = totalRequired;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists the invoices that match the search criteria. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SearchData searchData = buildBodyParams();
            return listCall(page, pageSize, totalRequired, searchData, _callback);
        }

        private SearchData buildBodyParams() {
            SearchData searchData = new SearchData();
            searchData.recipientEmail(this.recipientEmail);
            searchData.recipientFirstName(this.recipientFirstName);
            searchData.recipientLastName(this.recipientLastName);
            searchData.recipientBusinessName(this.recipientBusinessName);
            searchData.invoiceNumber(this.invoiceNumber);
            searchData.status(this.status);
            searchData.reference(this.reference);
            searchData.currencyCode(this.currencyCode);
            searchData.memo(this.memo);
            searchData.totalAmountRange(this.totalAmountRange);
            searchData.invoiceDateRange(this.invoiceDateRange);
            searchData.dueDateRange(this.dueDateRange);
            searchData.paymentDateRange(this.paymentDateRange);
            searchData.creationDateRange(this.creationDateRange);
            searchData.archived(this.archived);
            searchData.fields(this.fields);
            return searchData;
        }

        /**
         * Execute list request
         * @return Invoices
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists the invoices that match the search criteria. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Invoices execute() throws ApiException {
            SearchData searchData = buildBodyParams();
            ApiResponse<Invoices> localVarResp = listWithHttpInfo(page, pageSize, totalRequired, searchData);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;Invoices&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists the invoices that match the search criteria. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoices> executeWithHttpInfo() throws ApiException {
            SearchData searchData = buildBodyParams();
            return listWithHttpInfo(page, pageSize, totalRequired, searchData);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists the invoices that match the search criteria. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoices> _callback) throws ApiException {
            SearchData searchData = buildBodyParams();
            return listAsync(page, pageSize, totalRequired, searchData, _callback);
        }
    }

    /**
     * Search for invoices
     * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists the invoices that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
