/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AmountSummaryDetail;
import com.konfigthis.client.model.ContactNameAddress;
import com.konfigthis.client.model.Invoice;
import com.konfigthis.client.model.InvoiceDetail;
import com.konfigthis.client.model.InvoiceNumber;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.InvoicerInfo;
import com.konfigthis.client.model.Invoices;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.Model202Response;
import com.konfigthis.client.model.ModelConfiguration;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Notification;
import com.konfigthis.client.model.PaymentDetail;
import com.konfigthis.client.model.PaymentMethod;
import com.konfigthis.client.model.PaymentReference;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.Payments;
import com.konfigthis.client.model.QrConfig;
import com.konfigthis.client.model.RecipientInfo;
import com.konfigthis.client.model.RefundDetail;
import com.konfigthis.client.model.RefundReference;
import com.konfigthis.client.model.Refunds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelSentInvoiceCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/cancel"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSentInvoiceValidateBeforeCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling cancelSentInvoice(Async)");
        }

        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling cancelSentInvoice(Async)");
        }

        return cancelSentInvoiceCall(invoiceId, notification, _callback);

    }


    private ApiResponse<Void> cancelSentInvoiceWithHttpInfo(String invoiceId, Notification notification) throws ApiException {
        okhttp3.Call localVarCall = cancelSentInvoiceValidateBeforeCall(invoiceId, notification, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelSentInvoiceAsync(String invoiceId, Notification notification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSentInvoiceValidateBeforeCall(invoiceId, notification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelSentInvoiceRequestBuilder {
        private final String invoiceId;
        private String subject;
        private String note;
        private Boolean sendToInvoicer;
        private Boolean sendToRecipient;
        private List<String> additionalRecipients;

        private CancelSentInvoiceRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Set subject
         * @param subject The subject of the email that is sent as a notification to the recipient. (optional)
         * @return CancelSentInvoiceRequestBuilder
         */
        public CancelSentInvoiceRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set note
         * @param note A note to the payer. (optional)
         * @return CancelSentInvoiceRequestBuilder
         */
        public CancelSentInvoiceRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set sendToInvoicer
         * @param sendToInvoicer Indicates whether to send a copy of the email to the merchant. (optional, default to false)
         * @return CancelSentInvoiceRequestBuilder
         */
        public CancelSentInvoiceRequestBuilder sendToInvoicer(Boolean sendToInvoicer) {
            this.sendToInvoicer = sendToInvoicer;
            return this;
        }
        
        /**
         * Set sendToRecipient
         * @param sendToRecipient Indicates whether to send a copy of the email to the recipient. (optional, default to true)
         * @return CancelSentInvoiceRequestBuilder
         */
        public CancelSentInvoiceRequestBuilder sendToRecipient(Boolean sendToRecipient) {
            this.sendToRecipient = sendToRecipient;
            return this;
        }
        
        /**
         * Set additionalRecipients
         * @param additionalRecipients An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt; (optional)
         * @return CancelSentInvoiceRequestBuilder
         */
        public CancelSentInvoiceRequestBuilder additionalRecipients(List<String> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }
        
        /**
         * Build call for cancelSentInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return cancelSentInvoiceCall(invoiceId, notification, _callback);
        }

        private Notification buildBodyParams() {
            Notification notification = new Notification();
            notification.subject(this.subject);
            notification.note(this.note);
            notification.sendToInvoicer(this.sendToInvoicer);
            notification.sendToRecipient(this.sendToRecipient);
            notification.additionalRecipients(this.additionalRecipients);
            return notification;
        }

        /**
         * Execute cancelSentInvoice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Notification notification = buildBodyParams();
            cancelSentInvoiceWithHttpInfo(invoiceId, notification);
        }

        /**
         * Execute cancelSentInvoice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Notification notification = buildBodyParams();
            return cancelSentInvoiceWithHttpInfo(invoiceId, notification);
        }

        /**
         * Execute cancelSentInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return cancelSentInvoiceAsync(invoiceId, notification, _callback);
        }
    }

    /**
     * Cancel sent invoice
     * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param notification The email or SMS notification that will be sent to the payer on cancellation. (required)
     * @return CancelSentInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CancelSentInvoiceRequestBuilder cancelSentInvoice(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new CancelSentInvoiceRequestBuilder(invoiceId);
    }
    private okhttp3.Call createDraftInvoiceCall(Invoice invoice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoice;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDraftInvoiceValidateBeforeCall(Invoice invoice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoice' is set
        if (invoice == null) {
            throw new ApiException("Missing the required parameter 'invoice' when calling createDraftInvoice(Async)");
        }

        return createDraftInvoiceCall(invoice, _callback);

    }


    private ApiResponse<Invoice> createDraftInvoiceWithHttpInfo(Invoice invoice) throws ApiException {
        okhttp3.Call localVarCall = createDraftInvoiceValidateBeforeCall(invoice, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDraftInvoiceAsync(Invoice invoice, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDraftInvoiceValidateBeforeCall(invoice, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDraftInvoiceRequestBuilder {
        private final InvoiceDetail detail;
        private String id;
        private String parentId;
        private InvoiceStatus status;
        private InvoicerInfo invoicer;
        private List<RecipientInfo> primaryRecipients;
        private List<String> additionalRecipients;
        private List<Item> items;
        private ModelConfiguration _configuration;
        private AmountSummaryDetail amount;
        private Money dueAmount;
        private Money gratuity;
        private Payments payments;
        private Refunds refunds;
        private List<LinkDescription> links;

        private CreateDraftInvoiceRequestBuilder(InvoiceDetail detail) {
            this.detail = detail;
        }

        /**
         * Set id
         * @param id The ID of the invoice. (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set parentId
         * @param parentId The parent ID to an invoice that defines the group invoice to which the invoice is related. (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder status(InvoiceStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set invoicer
         * @param invoicer  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder invoicer(InvoicerInfo invoicer) {
            this.invoicer = invoicer;
            return this;
        }
        
        /**
         * Set primaryRecipients
         * @param primaryRecipients The billing and shipping information. Includes name, email, address, phone and language. (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder primaryRecipients(List<RecipientInfo> primaryRecipients) {
            this.primaryRecipients = primaryRecipients;
            return this;
        }
        
        /**
         * Set additionalRecipients
         * @param additionalRecipients An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt; (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder additionalRecipients(List<String> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }
        
        /**
         * Set items
         * @param items An array of invoice line item information. (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder items(List<Item> items) {
            this.items = items;
            return this;
        }
        
        /**
         * Set _configuration
         * @param _configuration  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder _configuration(ModelConfiguration _configuration) {
            this._configuration = _configuration;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder amount(AmountSummaryDetail amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set dueAmount
         * @param dueAmount  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder dueAmount(Money dueAmount) {
            this.dueAmount = dueAmount;
            return this;
        }
        
        /**
         * Set gratuity
         * @param gratuity  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder gratuity(Money gratuity) {
            this.gratuity = gratuity;
            return this;
        }
        
        /**
         * Set payments
         * @param payments  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder payments(Payments payments) {
            this.payments = payments;
            return this;
        }
        
        /**
         * Set refunds
         * @param refunds  (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder refunds(Refunds refunds) {
            this.refunds = refunds;
            return this;
        }
        
        /**
         * Set links
         * @param links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). (optional)
         * @return CreateDraftInvoiceRequestBuilder
         */
        public CreateDraftInvoiceRequestBuilder links(List<LinkDescription> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for createDraftInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Invoice invoice = buildBodyParams();
            return createDraftInvoiceCall(invoice, _callback);
        }

        private Invoice buildBodyParams() {
            Invoice invoice = new Invoice();
            invoice.id(this.id);
            invoice.parentId(this.parentId);
            invoice.status(this.status);
            invoice.detail(this.detail);
            invoice.invoicer(this.invoicer);
            invoice.primaryRecipients(this.primaryRecipients);
            invoice.additionalRecipients(this.additionalRecipients);
            invoice.items(this.items);
            invoice._configuration(this._configuration);
            invoice.amount(this.amount);
            invoice.dueAmount(this.dueAmount);
            invoice.gratuity(this.gratuity);
            invoice.payments(this.payments);
            invoice.refunds(this.refunds);
            invoice.links(this.links);
            return invoice;
        }

        /**
         * Execute createDraftInvoice request
         * @return Invoice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Invoice execute() throws ApiException {
            Invoice invoice = buildBodyParams();
            ApiResponse<Invoice> localVarResp = createDraftInvoiceWithHttpInfo(invoice);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDraftInvoice request with HTTP info returned
         * @return ApiResponse&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoice> executeWithHttpInfo() throws ApiException {
            Invoice invoice = buildBodyParams();
            return createDraftInvoiceWithHttpInfo(invoice);
        }

        /**
         * Execute createDraftInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoice> _callback) throws ApiException {
            Invoice invoice = buildBodyParams();
            return createDraftInvoiceAsync(invoice, _callback);
        }
    }

    /**
     * Create draft invoice
     * Creates a draft invoice. To move the invoice from a draft to payable state, you must &lt;a href&#x3D;\&quot;#invoices_send\&quot;&gt;send the invoice&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;In the JSON request body, include invoice details including merchant information. The &lt;code&gt;invoice&lt;/code&gt; object must include an &lt;code&gt;items&lt;/code&gt; array.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The merchant that you specify in an invoice must have a PayPal account in good standing.&lt;/blockquote&gt;.
     * @param invoice The invoice details which includes all information of the invoice like items, billing information. (required)
     * @return CreateDraftInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDraftInvoiceRequestBuilder createDraftInvoice(InvoiceDetail detail) throws IllegalArgumentException {
        if (detail == null) throw new IllegalArgumentException("\"detail\" is required but got null");
        return new CreateDraftInvoiceRequestBuilder(detail);
    }
    private okhttp3.Call deleteDraftOrScheduledInvoiceCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDraftOrScheduledInvoiceValidateBeforeCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling deleteDraftOrScheduledInvoice(Async)");
        }

        return deleteDraftOrScheduledInvoiceCall(invoiceId, _callback);

    }


    private ApiResponse<Void> deleteDraftOrScheduledInvoiceWithHttpInfo(String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDraftOrScheduledInvoiceValidateBeforeCall(invoiceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDraftOrScheduledInvoiceAsync(String invoiceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDraftOrScheduledInvoiceValidateBeforeCall(invoiceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDraftOrScheduledInvoiceRequestBuilder {
        private final String invoiceId;

        private DeleteDraftOrScheduledInvoiceRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Build call for deleteDraftOrScheduledInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDraftOrScheduledInvoiceCall(invoiceId, _callback);
        }


        /**
         * Execute deleteDraftOrScheduledInvoice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDraftOrScheduledInvoiceWithHttpInfo(invoiceId);
        }

        /**
         * Execute deleteDraftOrScheduledInvoice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDraftOrScheduledInvoiceWithHttpInfo(invoiceId);
        }

        /**
         * Execute deleteDraftOrScheduledInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDraftOrScheduledInvoiceAsync(invoiceId, _callback);
        }
    }

    /**
     * Delete invoice
     * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can &lt;a href&#x3D;\&quot;/docs/api/invoicing/v2/#invoices_cancel\&quot;&gt;cancel the invoice&lt;/a&gt;. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @return DeleteDraftOrScheduledInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDraftOrScheduledInvoiceRequestBuilder deleteDraftOrScheduledInvoice(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new DeleteDraftOrScheduledInvoiceRequestBuilder(invoiceId);
    }
    private okhttp3.Call deleteExternalPaymentCall(String invoiceId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/payments/{transaction_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalPaymentValidateBeforeCall(String invoiceId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling deleteExternalPayment(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling deleteExternalPayment(Async)");
        }

        return deleteExternalPaymentCall(invoiceId, transactionId, _callback);

    }


    private ApiResponse<Void> deleteExternalPaymentWithHttpInfo(String invoiceId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalPaymentValidateBeforeCall(invoiceId, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteExternalPaymentAsync(String invoiceId, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalPaymentValidateBeforeCall(invoiceId, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteExternalPaymentRequestBuilder {
        private final String invoiceId;
        private final String transactionId;

        private DeleteExternalPaymentRequestBuilder(String invoiceId, String transactionId) {
            this.invoiceId = invoiceId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for deleteExternalPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExternalPaymentCall(invoiceId, transactionId, _callback);
        }


        /**
         * Execute deleteExternalPayment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteExternalPaymentWithHttpInfo(invoiceId, transactionId);
        }

        /**
         * Execute deleteExternalPayment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteExternalPaymentWithHttpInfo(invoiceId, transactionId);
        }

        /**
         * Execute deleteExternalPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteExternalPaymentAsync(invoiceId, transactionId, _callback);
        }
    }

    /**
     * Delete external payment
     * Deletes an external payment, by invoice ID and transaction ID.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param transactionId The ID of the external refund transaction to delete. (required)
     * @return DeleteExternalPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExternalPaymentRequestBuilder deleteExternalPayment(String invoiceId, String transactionId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new DeleteExternalPaymentRequestBuilder(invoiceId, transactionId);
    }
    private okhttp3.Call deleteExternalRefundCall(String invoiceId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/refunds/{transaction_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalRefundValidateBeforeCall(String invoiceId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling deleteExternalRefund(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling deleteExternalRefund(Async)");
        }

        return deleteExternalRefundCall(invoiceId, transactionId, _callback);

    }


    private ApiResponse<Void> deleteExternalRefundWithHttpInfo(String invoiceId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalRefundValidateBeforeCall(invoiceId, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteExternalRefundAsync(String invoiceId, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalRefundValidateBeforeCall(invoiceId, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteExternalRefundRequestBuilder {
        private final String invoiceId;
        private final String transactionId;

        private DeleteExternalRefundRequestBuilder(String invoiceId, String transactionId) {
            this.invoiceId = invoiceId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for deleteExternalRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExternalRefundCall(invoiceId, transactionId, _callback);
        }


        /**
         * Execute deleteExternalRefund request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteExternalRefundWithHttpInfo(invoiceId, transactionId);
        }

        /**
         * Execute deleteExternalRefund request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteExternalRefundWithHttpInfo(invoiceId, transactionId);
        }

        /**
         * Execute deleteExternalRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteExternalRefundAsync(invoiceId, transactionId, _callback);
        }
    }

    /**
     * Delete external refund
     * Deletes an external refund, by invoice ID and transaction ID.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param transactionId The ID of the external refund transaction to delete. (required)
     * @return DeleteExternalRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExternalRefundRequestBuilder deleteExternalRefund(String invoiceId, String transactionId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new DeleteExternalRefundRequestBuilder(invoiceId, transactionId);
    }
    private okhttp3.Call generateNextInvoiceNumberCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/generate-next-invoice-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateNextInvoiceNumberValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return generateNextInvoiceNumberCall(_callback);

    }


    private ApiResponse<InvoiceNumber> generateNextInvoiceNumberWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateNextInvoiceNumberValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InvoiceNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateNextInvoiceNumberAsync(final ApiCallback<InvoiceNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateNextInvoiceNumberValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InvoiceNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateNextInvoiceNumberRequestBuilder {

        private GenerateNextInvoiceNumberRequestBuilder() {
        }

        /**
         * Build call for generateNextInvoiceNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the next invoice number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateNextInvoiceNumberCall(_callback);
        }


        /**
         * Execute generateNextInvoiceNumber request
         * @return InvoiceNumber
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the next invoice number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceNumber execute() throws ApiException {
            ApiResponse<InvoiceNumber> localVarResp = generateNextInvoiceNumberWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateNextInvoiceNumber request with HTTP info returned
         * @return ApiResponse&lt;InvoiceNumber&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the next invoice number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceNumber> executeWithHttpInfo() throws ApiException {
            return generateNextInvoiceNumberWithHttpInfo();
        }

        /**
         * Execute generateNextInvoiceNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the next invoice number. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceNumber> _callback) throws ApiException {
            return generateNextInvoiceNumberAsync(_callback);
        }
    }

    /**
     * Generate invoice number
     * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after &#x60;INVOICE-1234&#x60; is &#x60;INVOICE-1235&#x60;.
     * @return GenerateNextInvoiceNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the next invoice number. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateNextInvoiceNumberRequestBuilder generateNextInvoiceNumber() throws IllegalArgumentException {
        return new GenerateNextInvoiceNumberRequestBuilder();
    }
    private okhttp3.Call generateQrCodeCall(String invoiceId, QrConfig qrConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qrConfig;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/generate-qr-code"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/mixed",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateQrCodeValidateBeforeCall(String invoiceId, QrConfig qrConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling generateQrCode(Async)");
        }

        return generateQrCodeCall(invoiceId, qrConfig, _callback);

    }


    private ApiResponse<Void> generateQrCodeWithHttpInfo(String invoiceId, QrConfig qrConfig) throws ApiException {
        okhttp3.Call localVarCall = generateQrCodeValidateBeforeCall(invoiceId, qrConfig, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateQrCodeAsync(String invoiceId, QrConfig qrConfig, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateQrCodeValidateBeforeCall(invoiceId, qrConfig, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateQrCodeRequestBuilder {
        private final String invoiceId;
        private Integer width;
        private Integer height;
        private String action;

        private GenerateQrCodeRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Set width
         * @param width The width, in pixels, of the QR code image. Value is from &#x60;150&#x60; to &#x60;500&#x60;. (optional, default to 500)
         * @return GenerateQrCodeRequestBuilder
         */
        public GenerateQrCodeRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height The height, in pixels, of the QR code image. Value is from &#x60;150&#x60; to &#x60;500&#x60;. (optional, default to 500)
         * @return GenerateQrCodeRequestBuilder
         */
        public GenerateQrCodeRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set action
         * @param action The type of URL for which to generate a QR code. Valid values are &#x60;pay&#x60; and &#x60;details&#x60;. (optional, default to pay)
         * @return GenerateQrCodeRequestBuilder
         */
        public GenerateQrCodeRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for generateQrCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the QR code as a PNG image. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QrConfig qrConfig = buildBodyParams();
            return generateQrCodeCall(invoiceId, qrConfig, _callback);
        }

        private QrConfig buildBodyParams() {
            QrConfig qrConfig = new QrConfig();
            qrConfig.width(this.width);
            qrConfig.height(this.height);
            qrConfig.action(this.action);
            return qrConfig;
        }

        /**
         * Execute generateQrCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the QR code as a PNG image. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            QrConfig qrConfig = buildBodyParams();
            generateQrCodeWithHttpInfo(invoiceId, qrConfig);
        }

        /**
         * Execute generateQrCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the QR code as a PNG image. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            QrConfig qrConfig = buildBodyParams();
            return generateQrCodeWithHttpInfo(invoiceId, qrConfig);
        }

        /**
         * Execute generateQrCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the QR code as a PNG image. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            QrConfig qrConfig = buildBodyParams();
            return generateQrCodeAsync(invoiceId, qrConfig, _callback);
        }
    }

    /**
     * Generate QR code
     * Generates a QR code for an invoice, by ID. The QR code is a PNG image in &lt;a href&#x3D;\&quot;https://www.base64encode.org/\&quot;&gt;Base64-encoded&lt;/a&gt; format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must &lt;a href&#x3D;\&quot;#invoices_create\&quot;&gt;create an invoice&lt;/a&gt; and &lt;a href&#x3D;\&quot;#invoices_send\&quot;&gt;send an invoice&lt;/a&gt; to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @return GenerateQrCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows the QR code as a PNG image. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateQrCodeRequestBuilder generateQrCode(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new GenerateQrCodeRequestBuilder(invoiceId);
    }
    private okhttp3.Call getDetailsCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getDetails(Async)");
        }

        return getDetailsCall(invoiceId, _callback);

    }


    private ApiResponse<Invoice> getDetailsWithHttpInfo(String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String invoiceId, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String invoiceId;

        private GetDetailsRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows invoice details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(invoiceId, _callback);
        }


        /**
         * Execute getDetails request
         * @return Invoice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows invoice details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Invoice execute() throws ApiException {
            ApiResponse<Invoice> localVarResp = getDetailsWithHttpInfo(invoiceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows invoice details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoice> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(invoiceId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows invoice details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoice> _callback) throws ApiException {
            return getDetailsAsync(invoiceId, _callback);
        }
    }

    /**
     * Show invoice details
     * Shows details for an invoice, by ID.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows invoice details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new GetDetailsRequestBuilder(invoiceId);
    }
    private okhttp3.Call getInvoicesCall(Integer page, Integer pageSize, Boolean totalRequired, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (totalRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_required", totalRequired));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicesValidateBeforeCall(Integer page, Integer pageSize, Boolean totalRequired, String fields, final ApiCallback _callback) throws ApiException {
        return getInvoicesCall(page, pageSize, totalRequired, fields, _callback);

    }


    private ApiResponse<Invoices> getInvoicesWithHttpInfo(Integer page, Integer pageSize, Boolean totalRequired, String fields) throws ApiException {
        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(page, pageSize, totalRequired, fields, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoicesAsync(Integer page, Integer pageSize, Boolean totalRequired, String fields, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(page, pageSize, totalRequired, fields, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvoicesRequestBuilder {
        private Integer page;
        private Integer pageSize;
        private Boolean totalRequired;
        private String fields;

        private GetInvoicesRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates. (optional, default to 1)
         * @return GetInvoicesRequestBuilder
         */
        public GetInvoicesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The maximum number of templates to return in the response. (optional, default to 20)
         * @return GetInvoicesRequestBuilder
         */
        public GetInvoicesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set totalRequired
         * @param totalRequired Indicates whether the to show &lt;code&gt;total_pages&lt;/code&gt; and &lt;code&gt;total_items&lt;/code&gt; in the response. (optional, default to false)
         * @return GetInvoicesRequestBuilder
         */
        public GetInvoicesRequestBuilder totalRequired(Boolean totalRequired) {
            this.totalRequired = totalRequired;
            return this;
        }
        
        /**
         * Set fields
         * @param fields The fields to return in the response. Value is &#x60;all&#x60; or &#x60;none&#x60;. To return only the template name, ID, and default attributes, specify &#x60;none&#x60;. (optional, default to all)
         * @return GetInvoicesRequestBuilder
         */
        public GetInvoicesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoicesCall(page, pageSize, totalRequired, fields, _callback);
        }


        /**
         * Execute getInvoices request
         * @return Invoices
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Invoices execute() throws ApiException {
            ApiResponse<Invoices> localVarResp = getInvoicesWithHttpInfo(page, pageSize, totalRequired, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvoices request with HTTP info returned
         * @return ApiResponse&lt;Invoices&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoices> executeWithHttpInfo() throws ApiException {
            return getInvoicesWithHttpInfo(page, pageSize, totalRequired, fields);
        }

        /**
         * Execute getInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoices> _callback) throws ApiException {
            return getInvoicesAsync(page, pageSize, totalRequired, fields, _callback);
        }
    }

    /**
     * List invoices
     * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
     * @return GetInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that lists invoices with details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public GetInvoicesRequestBuilder getInvoices() throws IllegalArgumentException {
        return new GetInvoicesRequestBuilder();
    }
    private okhttp3.Call recordPaymentCall(String invoiceId, PaymentDetail paymentDetail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentDetail;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/payments"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordPaymentValidateBeforeCall(String invoiceId, PaymentDetail paymentDetail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling recordPayment(Async)");
        }

        // verify the required parameter 'paymentDetail' is set
        if (paymentDetail == null) {
            throw new ApiException("Missing the required parameter 'paymentDetail' when calling recordPayment(Async)");
        }

        return recordPaymentCall(invoiceId, paymentDetail, _callback);

    }


    private ApiResponse<PaymentReference> recordPaymentWithHttpInfo(String invoiceId, PaymentDetail paymentDetail) throws ApiException {
        okhttp3.Call localVarCall = recordPaymentValidateBeforeCall(invoiceId, paymentDetail, null);
        Type localVarReturnType = new TypeToken<PaymentReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordPaymentAsync(String invoiceId, PaymentDetail paymentDetail, final ApiCallback<PaymentReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordPaymentValidateBeforeCall(invoiceId, paymentDetail, _callback);
        Type localVarReturnType = new TypeToken<PaymentReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RecordPaymentRequestBuilder {
        private final PaymentMethod method;
        private final String invoiceId;
        private PaymentType type;
        private String paymentId;
        private String paymentDate;
        private String note;
        private Money amount;
        private ContactNameAddress shippingInfo;

        private RecordPaymentRequestBuilder(PaymentMethod method, String invoiceId) {
            this.method = method;
            this.invoiceId = invoiceId;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder type(PaymentType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set paymentId
         * @param paymentId The ID for a PayPal payment transaction. Required for the &#x60;PAYPAL&#x60; payment type. (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder paymentId(String paymentId) {
            this.paymentId = paymentId;
            return this;
        }
        
        /**
         * Set paymentDate
         * @param paymentDate The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years. (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder paymentDate(String paymentDate) {
            this.paymentDate = paymentDate;
            return this;
        }
        
        /**
         * Set note
         * @param note A note associated with an external cash or check payment. (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder amount(Money amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set shippingInfo
         * @param shippingInfo  (optional)
         * @return RecordPaymentRequestBuilder
         */
        public RecordPaymentRequestBuilder shippingInfo(ContactNameAddress shippingInfo) {
            this.shippingInfo = shippingInfo;
            return this;
        }
        
        /**
         * Build call for recordPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded payment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentDetail paymentDetail = buildBodyParams();
            return recordPaymentCall(invoiceId, paymentDetail, _callback);
        }

        private PaymentDetail buildBodyParams() {
            PaymentDetail paymentDetail = new PaymentDetail();
            paymentDetail.type(this.type);
            paymentDetail.paymentId(this.paymentId);
            paymentDetail.paymentDate(this.paymentDate);
            paymentDetail.method(this.method);
            paymentDetail.note(this.note);
            paymentDetail.amount(this.amount);
            paymentDetail.shippingInfo(this.shippingInfo);
            return paymentDetail;
        }

        /**
         * Execute recordPayment request
         * @return PaymentReference
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded payment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public PaymentReference execute() throws ApiException {
            PaymentDetail paymentDetail = buildBodyParams();
            ApiResponse<PaymentReference> localVarResp = recordPaymentWithHttpInfo(invoiceId, paymentDetail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute recordPayment request with HTTP info returned
         * @return ApiResponse&lt;PaymentReference&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded payment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentReference> executeWithHttpInfo() throws ApiException {
            PaymentDetail paymentDetail = buildBodyParams();
            return recordPaymentWithHttpInfo(invoiceId, paymentDetail);
        }

        /**
         * Execute recordPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded payment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentReference> _callback) throws ApiException {
            PaymentDetail paymentDetail = buildBodyParams();
            return recordPaymentAsync(invoiceId, paymentDetail, _callback);
        }
    }

    /**
     * Record payment for invoice
     * Records a payment for the invoice. If no payment is due, the invoice is marked as &#x60;PAID&#x60;. Otherwise, the invoice is marked as &#x60;PARTIALLY PAID&#x60;.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param paymentDetail The details of the payment to record against the invoice. (required)
     * @return RecordPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded payment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public RecordPaymentRequestBuilder recordPayment(PaymentMethod method, String invoiceId) throws IllegalArgumentException {
        if (method == null) throw new IllegalArgumentException("\"method\" is required but got null");
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new RecordPaymentRequestBuilder(method, invoiceId);
    }
    private okhttp3.Call recordRefundCall(String invoiceId, RefundDetail refundDetail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundDetail;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/refunds"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordRefundValidateBeforeCall(String invoiceId, RefundDetail refundDetail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling recordRefund(Async)");
        }

        // verify the required parameter 'refundDetail' is set
        if (refundDetail == null) {
            throw new ApiException("Missing the required parameter 'refundDetail' when calling recordRefund(Async)");
        }

        return recordRefundCall(invoiceId, refundDetail, _callback);

    }


    private ApiResponse<RefundReference> recordRefundWithHttpInfo(String invoiceId, RefundDetail refundDetail) throws ApiException {
        okhttp3.Call localVarCall = recordRefundValidateBeforeCall(invoiceId, refundDetail, null);
        Type localVarReturnType = new TypeToken<RefundReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordRefundAsync(String invoiceId, RefundDetail refundDetail, final ApiCallback<RefundReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordRefundValidateBeforeCall(invoiceId, refundDetail, _callback);
        Type localVarReturnType = new TypeToken<RefundReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RecordRefundRequestBuilder {
        private final PaymentMethod method;
        private final String invoiceId;
        private PaymentType type;
        private String refundId;
        private String refundDate;
        private Money amount;

        private RecordRefundRequestBuilder(PaymentMethod method, String invoiceId) {
            this.method = method;
            this.invoiceId = invoiceId;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return RecordRefundRequestBuilder
         */
        public RecordRefundRequestBuilder type(PaymentType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set refundId
         * @param refundId The ID for a PayPal payment transaction. Required for the &#x60;PAYPAL&#x60; payment type. (optional)
         * @return RecordRefundRequestBuilder
         */
        public RecordRefundRequestBuilder refundId(String refundId) {
            this.refundId = refundId;
            return this;
        }
        
        /**
         * Set refundDate
         * @param refundDate The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years. (optional)
         * @return RecordRefundRequestBuilder
         */
        public RecordRefundRequestBuilder refundDate(String refundDate) {
            this.refundDate = refundDate;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return RecordRefundRequestBuilder
         */
        public RecordRefundRequestBuilder amount(Money amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Build call for recordRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded refund. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RefundDetail refundDetail = buildBodyParams();
            return recordRefundCall(invoiceId, refundDetail, _callback);
        }

        private RefundDetail buildBodyParams() {
            RefundDetail refundDetail = new RefundDetail();
            refundDetail.type(this.type);
            refundDetail.refundId(this.refundId);
            refundDetail.refundDate(this.refundDate);
            refundDetail.amount(this.amount);
            refundDetail.method(this.method);
            return refundDetail;
        }

        /**
         * Execute recordRefund request
         * @return RefundReference
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded refund. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public RefundReference execute() throws ApiException {
            RefundDetail refundDetail = buildBodyParams();
            ApiResponse<RefundReference> localVarResp = recordRefundWithHttpInfo(invoiceId, refundDetail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute recordRefund request with HTTP info returned
         * @return ApiResponse&lt;RefundReference&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded refund. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RefundReference> executeWithHttpInfo() throws ApiException {
            RefundDetail refundDetail = buildBodyParams();
            return recordRefundWithHttpInfo(invoiceId, refundDetail);
        }

        /**
         * Execute recordRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded refund. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RefundReference> _callback) throws ApiException {
            RefundDetail refundDetail = buildBodyParams();
            return recordRefundAsync(invoiceId, refundDetail, _callback);
        }
    }

    /**
     * Record refund for invoice
     * Records a refund for the invoice. If all payments are refunded, the invoice is marked as &#x60;REFUNDED&#x60;. Otherwise, the invoice is marked as &#x60;PARTIALLY REFUNDED&#x60;.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param refundDetail The details of the refund to record against the invoice. (required)
     * @return RecordRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 Created&#x60; status code and a reference to the recorded refund. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public RecordRefundRequestBuilder recordRefund(PaymentMethod method, String invoiceId) throws IllegalArgumentException {
        if (method == null) throw new IllegalArgumentException("\"method\" is required but got null");
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new RecordRefundRequestBuilder(method, invoiceId);
    }
    private okhttp3.Call sendInvoiceCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/send"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendInvoiceValidateBeforeCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling sendInvoice(Async)");
        }

        return sendInvoiceCall(invoiceId, notification, _callback);

    }


    private ApiResponse<LinkDescription> sendInvoiceWithHttpInfo(String invoiceId, Notification notification) throws ApiException {
        okhttp3.Call localVarCall = sendInvoiceValidateBeforeCall(invoiceId, notification, null);
        Type localVarReturnType = new TypeToken<LinkDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendInvoiceAsync(String invoiceId, Notification notification, final ApiCallback<LinkDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendInvoiceValidateBeforeCall(invoiceId, notification, _callback);
        Type localVarReturnType = new TypeToken<LinkDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendInvoiceRequestBuilder {
        private final String invoiceId;
        private String subject;
        private String note;
        private Boolean sendToInvoicer;
        private Boolean sendToRecipient;
        private List<String> additionalRecipients;

        private SendInvoiceRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Set subject
         * @param subject The subject of the email that is sent as a notification to the recipient. (optional)
         * @return SendInvoiceRequestBuilder
         */
        public SendInvoiceRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set note
         * @param note A note to the payer. (optional)
         * @return SendInvoiceRequestBuilder
         */
        public SendInvoiceRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set sendToInvoicer
         * @param sendToInvoicer Indicates whether to send a copy of the email to the merchant. (optional, default to false)
         * @return SendInvoiceRequestBuilder
         */
        public SendInvoiceRequestBuilder sendToInvoicer(Boolean sendToInvoicer) {
            this.sendToInvoicer = sendToInvoicer;
            return this;
        }
        
        /**
         * Set sendToRecipient
         * @param sendToRecipient Indicates whether to send a copy of the email to the recipient. (optional, default to true)
         * @return SendInvoiceRequestBuilder
         */
        public SendInvoiceRequestBuilder sendToRecipient(Boolean sendToRecipient) {
            this.sendToRecipient = sendToRecipient;
            return this;
        }
        
        /**
         * Set additionalRecipients
         * @param additionalRecipients An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt; (optional)
         * @return SendInvoiceRequestBuilder
         */
        public SendInvoiceRequestBuilder additionalRecipients(List<String> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }
        
        /**
         * Build call for sendInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; when the invoice issue date is current date. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> A successful request returns the HTTP &#x60;202 Accepted&#x60; status code with no JSON response body, when the invoice issue date is in future. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return sendInvoiceCall(invoiceId, notification, _callback);
        }

        private Notification buildBodyParams() {
            Notification notification = new Notification();
            notification.subject(this.subject);
            notification.note(this.note);
            notification.sendToInvoicer(this.sendToInvoicer);
            notification.sendToRecipient(this.sendToRecipient);
            notification.additionalRecipients(this.additionalRecipients);
            return notification;
        }

        /**
         * Execute sendInvoice request
         * @return LinkDescription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; when the invoice issue date is current date. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> A successful request returns the HTTP &#x60;202 Accepted&#x60; status code with no JSON response body, when the invoice issue date is in future. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public LinkDescription execute() throws ApiException {
            Notification notification = buildBodyParams();
            ApiResponse<LinkDescription> localVarResp = sendInvoiceWithHttpInfo(invoiceId, notification);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendInvoice request with HTTP info returned
         * @return ApiResponse&lt;LinkDescription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; when the invoice issue date is current date. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> A successful request returns the HTTP &#x60;202 Accepted&#x60; status code with no JSON response body, when the invoice issue date is in future. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkDescription> executeWithHttpInfo() throws ApiException {
            Notification notification = buildBodyParams();
            return sendInvoiceWithHttpInfo(invoiceId, notification);
        }

        /**
         * Execute sendInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; when the invoice issue date is current date. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> A successful request returns the HTTP &#x60;202 Accepted&#x60; status code with no JSON response body, when the invoice issue date is in future. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkDescription> _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return sendInvoiceAsync(invoiceId, notification, _callback);
        }
    }

    /**
     * Send invoice
     * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:&lt;ul&gt;&lt;li&gt;If the invoice issue date is current or in the past, sends the invoice immediately.&lt;/li&gt;&lt;li&gt;If the invoice issue date is in the future, schedules the invoice to be sent on that date.&lt;/li&gt;&lt;/ul&gt;To suppress the merchant&#39;s email notification, set the &#x60;send_to_invoicer&#x60; body parameter to &#x60;false&#x60;. To send the invoice through a share link and not through PayPal, set the &lt;code&gt;send_to_recipient&lt;/code&gt; parameter to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;notification&lt;/code&gt; object. The &lt;code&gt;send_to_recipient&lt;/code&gt; parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.&lt;blockquote&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;After you send an invoice, resending it has no effect.&lt;/li&gt;&lt;li&gt;To send a notification for updates, &lt;a href&#x3D;\&quot;#invoices_update\&quot;&gt;update the invoice&lt;/a&gt; and set the &lt;code&gt;send_to_recipient&lt;/code&gt; body parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @return SendInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; when the invoice issue date is current date. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> A successful request returns the HTTP &#x60;202 Accepted&#x60; status code with no JSON response body, when the invoice issue date is in future. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public SendInvoiceRequestBuilder sendInvoice(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new SendInvoiceRequestBuilder(invoiceId);
    }
    private okhttp3.Call sendReminderCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}/remind"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderValidateBeforeCall(String invoiceId, Notification notification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling sendReminder(Async)");
        }

        return sendReminderCall(invoiceId, notification, _callback);

    }


    private ApiResponse<Void> sendReminderWithHttpInfo(String invoiceId, Notification notification) throws ApiException {
        okhttp3.Call localVarCall = sendReminderValidateBeforeCall(invoiceId, notification, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendReminderAsync(String invoiceId, Notification notification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderValidateBeforeCall(invoiceId, notification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendReminderRequestBuilder {
        private final String invoiceId;
        private String subject;
        private String note;
        private Boolean sendToInvoicer;
        private Boolean sendToRecipient;
        private List<String> additionalRecipients;

        private SendReminderRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Set subject
         * @param subject The subject of the email that is sent as a notification to the recipient. (optional)
         * @return SendReminderRequestBuilder
         */
        public SendReminderRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set note
         * @param note A note to the payer. (optional)
         * @return SendReminderRequestBuilder
         */
        public SendReminderRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set sendToInvoicer
         * @param sendToInvoicer Indicates whether to send a copy of the email to the merchant. (optional, default to false)
         * @return SendReminderRequestBuilder
         */
        public SendReminderRequestBuilder sendToInvoicer(Boolean sendToInvoicer) {
            this.sendToInvoicer = sendToInvoicer;
            return this;
        }
        
        /**
         * Set sendToRecipient
         * @param sendToRecipient Indicates whether to send a copy of the email to the recipient. (optional, default to true)
         * @return SendReminderRequestBuilder
         */
        public SendReminderRequestBuilder sendToRecipient(Boolean sendToRecipient) {
            this.sendToRecipient = sendToRecipient;
            return this;
        }
        
        /**
         * Set additionalRecipients
         * @param additionalRecipients An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt; (optional)
         * @return SendReminderRequestBuilder
         */
        public SendReminderRequestBuilder additionalRecipients(List<String> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }
        
        /**
         * Build call for sendReminder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return sendReminderCall(invoiceId, notification, _callback);
        }

        private Notification buildBodyParams() {
            Notification notification = new Notification();
            notification.subject(this.subject);
            notification.note(this.note);
            notification.sendToInvoicer(this.sendToInvoicer);
            notification.sendToRecipient(this.sendToRecipient);
            notification.additionalRecipients(this.additionalRecipients);
            return notification;
        }

        /**
         * Execute sendReminder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Notification notification = buildBodyParams();
            sendReminderWithHttpInfo(invoiceId, notification);
        }

        /**
         * Execute sendReminder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Notification notification = buildBodyParams();
            return sendReminderWithHttpInfo(invoiceId, notification);
        }

        /**
         * Execute sendReminder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Notification notification = buildBodyParams();
            return sendReminderAsync(invoiceId, notification, _callback);
        }
    }

    /**
     * Send invoice reminder
     * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a &#x60;notification&#x60; object that defines the subject of the reminder and other details.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @return SendReminderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with no JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public SendReminderRequestBuilder sendReminder(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new SendReminderRequestBuilder(invoiceId);
    }
    private okhttp3.Call updateFullInvoiceCall(String invoiceId, Invoice invoice, Boolean sendToRecipient, Boolean sendToInvoicer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoice;

        // create path and map variables
        String localVarPath = "/v2/invoicing/invoices/{invoice_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendToRecipient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("send_to_recipient", sendToRecipient));
        }

        if (sendToInvoicer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("send_to_invoicer", sendToInvoicer));
        }

        final String[] localVarAccepts = {
            "application/json",
            "multipart/mixed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFullInvoiceValidateBeforeCall(String invoiceId, Invoice invoice, Boolean sendToRecipient, Boolean sendToInvoicer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling updateFullInvoice(Async)");
        }

        // verify the required parameter 'invoice' is set
        if (invoice == null) {
            throw new ApiException("Missing the required parameter 'invoice' when calling updateFullInvoice(Async)");
        }

        return updateFullInvoiceCall(invoiceId, invoice, sendToRecipient, sendToInvoicer, _callback);

    }


    private ApiResponse<Invoice> updateFullInvoiceWithHttpInfo(String invoiceId, Invoice invoice, Boolean sendToRecipient, Boolean sendToInvoicer) throws ApiException {
        okhttp3.Call localVarCall = updateFullInvoiceValidateBeforeCall(invoiceId, invoice, sendToRecipient, sendToInvoicer, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFullInvoiceAsync(String invoiceId, Invoice invoice, Boolean sendToRecipient, Boolean sendToInvoicer, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFullInvoiceValidateBeforeCall(invoiceId, invoice, sendToRecipient, sendToInvoicer, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFullInvoiceRequestBuilder {
        private final InvoiceDetail detail;
        private final String invoiceId;
        private String id;
        private String parentId;
        private InvoiceStatus status;
        private InvoicerInfo invoicer;
        private List<RecipientInfo> primaryRecipients;
        private List<String> additionalRecipients;
        private List<Item> items;
        private ModelConfiguration _configuration;
        private AmountSummaryDetail amount;
        private Money dueAmount;
        private Money gratuity;
        private Payments payments;
        private Refunds refunds;
        private List<LinkDescription> links;
        private Boolean sendToRecipient;
        private Boolean sendToInvoicer;

        private UpdateFullInvoiceRequestBuilder(InvoiceDetail detail, String invoiceId) {
            this.detail = detail;
            this.invoiceId = invoiceId;
        }

        /**
         * Set id
         * @param id The ID of the invoice. (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set parentId
         * @param parentId The parent ID to an invoice that defines the group invoice to which the invoice is related. (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder status(InvoiceStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set invoicer
         * @param invoicer  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder invoicer(InvoicerInfo invoicer) {
            this.invoicer = invoicer;
            return this;
        }
        
        /**
         * Set primaryRecipients
         * @param primaryRecipients The billing and shipping information. Includes name, email, address, phone and language. (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder primaryRecipients(List<RecipientInfo> primaryRecipients) {
            this.primaryRecipients = primaryRecipients;
            return this;
        }
        
        /**
         * Set additionalRecipients
         * @param additionalRecipients An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt; (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder additionalRecipients(List<String> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }
        
        /**
         * Set items
         * @param items An array of invoice line item information. (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder items(List<Item> items) {
            this.items = items;
            return this;
        }
        
        /**
         * Set _configuration
         * @param _configuration  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder _configuration(ModelConfiguration _configuration) {
            this._configuration = _configuration;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder amount(AmountSummaryDetail amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set dueAmount
         * @param dueAmount  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder dueAmount(Money dueAmount) {
            this.dueAmount = dueAmount;
            return this;
        }
        
        /**
         * Set gratuity
         * @param gratuity  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder gratuity(Money gratuity) {
            this.gratuity = gratuity;
            return this;
        }
        
        /**
         * Set payments
         * @param payments  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder payments(Payments payments) {
            this.payments = payments;
            return this;
        }
        
        /**
         * Set refunds
         * @param refunds  (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder refunds(Refunds refunds) {
            this.refunds = refunds;
            return this;
        }
        
        /**
         * Set links
         * @param links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). (optional)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder links(List<LinkDescription> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set sendToRecipient
         * @param sendToRecipient Indicates whether to send the invoice update notification to the recipient. (optional, default to true)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder sendToRecipient(Boolean sendToRecipient) {
            this.sendToRecipient = sendToRecipient;
            return this;
        }
        
        /**
         * Set sendToInvoicer
         * @param sendToInvoicer Indicates whether to send the invoice update notification to the merchant. (optional, default to true)
         * @return UpdateFullInvoiceRequestBuilder
         */
        public UpdateFullInvoiceRequestBuilder sendToInvoicer(Boolean sendToInvoicer) {
            this.sendToInvoicer = sendToInvoicer;
            return this;
        }
        
        /**
         * Build call for updateFullInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Invoice invoice = buildBodyParams();
            return updateFullInvoiceCall(invoiceId, invoice, sendToRecipient, sendToInvoicer, _callback);
        }

        private Invoice buildBodyParams() {
            Invoice invoice = new Invoice();
            invoice.id(this.id);
            invoice.parentId(this.parentId);
            invoice.status(this.status);
            invoice.detail(this.detail);
            invoice.invoicer(this.invoicer);
            invoice.primaryRecipients(this.primaryRecipients);
            invoice.additionalRecipients(this.additionalRecipients);
            invoice.items(this.items);
            invoice._configuration(this._configuration);
            invoice.amount(this.amount);
            invoice.dueAmount(this.dueAmount);
            invoice.gratuity(this.gratuity);
            invoice.payments(this.payments);
            invoice.refunds(this.refunds);
            invoice.links(this.links);
            return invoice;
        }

        /**
         * Execute updateFullInvoice request
         * @return Invoice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Invoice execute() throws ApiException {
            Invoice invoice = buildBodyParams();
            ApiResponse<Invoice> localVarResp = updateFullInvoiceWithHttpInfo(invoiceId, invoice, sendToRecipient, sendToInvoicer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFullInvoice request with HTTP info returned
         * @return ApiResponse&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoice> executeWithHttpInfo() throws ApiException {
            Invoice invoice = buildBodyParams();
            return updateFullInvoiceWithHttpInfo(invoiceId, invoice, sendToRecipient, sendToInvoicer);
        }

        /**
         * Execute updateFullInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoice> _callback) throws ApiException {
            Invoice invoice = buildBodyParams();
            return updateFullInvoiceAsync(invoiceId, invoice, sendToRecipient, sendToInvoicer, _callback);
        }
    }

    /**
     * Fully update invoice
     * Fully updates an invoice, by ID. In the JSON request body, include a complete &#x60;invoice&#x60; object. This call does not support partial updates.
     * @param invoiceId The ID of the draft invoice to delete. (required)
     * @param invoice A representation of changes to make in the invoice. (required)
     * @return UpdateFullInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code. A JSON response body that shows invoice details is returned if you set &lt;code&gt;prefer&#x3D;return&#x3D;representation&lt;/code&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFullInvoiceRequestBuilder updateFullInvoice(InvoiceDetail detail, String invoiceId) throws IllegalArgumentException {
        if (detail == null) throw new IllegalArgumentException("\"detail\" is required but got null");
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new UpdateFullInvoiceRequestBuilder(detail, invoiceId);
    }
}
