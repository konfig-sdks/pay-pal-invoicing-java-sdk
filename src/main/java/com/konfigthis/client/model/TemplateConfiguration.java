/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PartialPayment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The template configuration details. Includes tax information, tip, and partial payment.
 */
@ApiModel(description = "The template configuration details. Includes tax information, tip, and partial payment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TemplateConfiguration {
  public static final String SERIALIZED_NAME_TAX_CALCULATED_AFTER_DISCOUNT = "tax_calculated_after_discount";
  @SerializedName(SERIALIZED_NAME_TAX_CALCULATED_AFTER_DISCOUNT)
  private Boolean taxCalculatedAfterDiscount = true;

  public static final String SERIALIZED_NAME_TAX_INCLUSIVE = "tax_inclusive";
  @SerializedName(SERIALIZED_NAME_TAX_INCLUSIVE)
  private Boolean taxInclusive = false;

  public static final String SERIALIZED_NAME_ALLOW_TIP = "allow_tip";
  @SerializedName(SERIALIZED_NAME_ALLOW_TIP)
  private Boolean allowTip = false;

  public static final String SERIALIZED_NAME_PARTIAL_PAYMENT = "partial_payment";
  @SerializedName(SERIALIZED_NAME_PARTIAL_PAYMENT)
  private PartialPayment partialPayment;

  public TemplateConfiguration() {
  }

  public TemplateConfiguration taxCalculatedAfterDiscount(Boolean taxCalculatedAfterDiscount) {
    
    
    
    
    this.taxCalculatedAfterDiscount = taxCalculatedAfterDiscount;
    return this;
  }

   /**
   * Indicates whether the tax is calculated before or after a discount. If &#x60;false&#x60;, the tax is calculated before a discount. If &#x60;true&#x60;, the tax is calculated after a discount.
   * @return taxCalculatedAfterDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether the tax is calculated before or after a discount. If `false`, the tax is calculated before a discount. If `true`, the tax is calculated after a discount.")

  public Boolean getTaxCalculatedAfterDiscount() {
    return taxCalculatedAfterDiscount;
  }


  public void setTaxCalculatedAfterDiscount(Boolean taxCalculatedAfterDiscount) {
    
    
    
    this.taxCalculatedAfterDiscount = taxCalculatedAfterDiscount;
  }


  public TemplateConfiguration taxInclusive(Boolean taxInclusive) {
    
    
    
    
    this.taxInclusive = taxInclusive;
    return this;
  }

   /**
   * Indicates whether the unit price includes tax.
   * @return taxInclusive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether the unit price includes tax.")

  public Boolean getTaxInclusive() {
    return taxInclusive;
  }


  public void setTaxInclusive(Boolean taxInclusive) {
    
    
    
    this.taxInclusive = taxInclusive;
  }


  public TemplateConfiguration allowTip(Boolean allowTip) {
    
    
    
    
    this.allowTip = allowTip;
    return this;
  }

   /**
   * Indicates whether the invoice enables the customer to enter a tip amount during payment. If &#x60;true&#x60;, the invoice shows a tip amount field so that the customer can enter a tip amount. If &#x60;false&#x60;, the invoice does not show a tip amount field.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature is not available for users in &#x60;Hong Kong&#x60;, &#x60;Taiwan&#x60;, &#x60;India&#x60;, or &#x60;Japan&#x60;.&lt;/blockquote&gt;
   * @return allowTip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether the invoice enables the customer to enter a tip amount during payment. If `true`, the invoice shows a tip amount field so that the customer can enter a tip amount. If `false`, the invoice does not show a tip amount field.<blockquote><strong>Note:</strong> This feature is not available for users in `Hong Kong`, `Taiwan`, `India`, or `Japan`.</blockquote>")

  public Boolean getAllowTip() {
    return allowTip;
  }


  public void setAllowTip(Boolean allowTip) {
    
    
    
    this.allowTip = allowTip;
  }


  public TemplateConfiguration partialPayment(PartialPayment partialPayment) {
    
    
    
    
    this.partialPayment = partialPayment;
    return this;
  }

   /**
   * Get partialPayment
   * @return partialPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialPayment getPartialPayment() {
    return partialPayment;
  }


  public void setPartialPayment(PartialPayment partialPayment) {
    
    
    
    this.partialPayment = partialPayment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TemplateConfiguration instance itself
   */
  public TemplateConfiguration putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateConfiguration templateConfiguration = (TemplateConfiguration) o;
    return Objects.equals(this.taxCalculatedAfterDiscount, templateConfiguration.taxCalculatedAfterDiscount) &&
        Objects.equals(this.taxInclusive, templateConfiguration.taxInclusive) &&
        Objects.equals(this.allowTip, templateConfiguration.allowTip) &&
        Objects.equals(this.partialPayment, templateConfiguration.partialPayment)&&
        Objects.equals(this.additionalProperties, templateConfiguration.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taxCalculatedAfterDiscount, taxInclusive, allowTip, partialPayment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateConfiguration {\n");
    sb.append("    taxCalculatedAfterDiscount: ").append(toIndentedString(taxCalculatedAfterDiscount)).append("\n");
    sb.append("    taxInclusive: ").append(toIndentedString(taxInclusive)).append("\n");
    sb.append("    allowTip: ").append(toIndentedString(allowTip)).append("\n");
    sb.append("    partialPayment: ").append(toIndentedString(partialPayment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tax_calculated_after_discount");
    openapiFields.add("tax_inclusive");
    openapiFields.add("allow_tip");
    openapiFields.add("partial_payment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplateConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TemplateConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateConfiguration is not found in the empty JSON string", TemplateConfiguration.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `partial_payment`
      if (jsonObj.get("partial_payment") != null && !jsonObj.get("partial_payment").isJsonNull()) {
        PartialPayment.validateJsonObject(jsonObj.getAsJsonObject("partial_payment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateConfiguration>() {
           @Override
           public void write(JsonWriter out, TemplateConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TemplateConfiguration instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateConfiguration
  * @throws IOException if the JSON string is invalid with respect to TemplateConfiguration
  */
  public static TemplateConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateConfiguration.class);
  }

 /**
  * Convert an instance of TemplateConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

