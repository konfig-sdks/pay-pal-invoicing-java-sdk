/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AmountRange;
import com.konfigthis.client.model.DateRange;
import com.konfigthis.client.model.DateTimeRange;
import com.konfigthis.client.model.InvoiceStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The invoice search parameters.
 */
@ApiModel(description = "The invoice search parameters.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SearchData {
  public static final String SERIALIZED_NAME_RECIPIENT_EMAIL = "recipient_email";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_EMAIL)
  private String recipientEmail;

  public static final String SERIALIZED_NAME_RECIPIENT_FIRST_NAME = "recipient_first_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_FIRST_NAME)
  private String recipientFirstName;

  public static final String SERIALIZED_NAME_RECIPIENT_LAST_NAME = "recipient_last_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_LAST_NAME)
  private String recipientLastName;

  public static final String SERIALIZED_NAME_RECIPIENT_BUSINESS_NAME = "recipient_business_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_BUSINESS_NAME)
  private String recipientBusinessName;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<InvoiceStatus> status = null;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_RANGE = "total_amount_range";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_RANGE)
  private AmountRange totalAmountRange;

  public static final String SERIALIZED_NAME_INVOICE_DATE_RANGE = "invoice_date_range";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE_RANGE)
  private DateRange invoiceDateRange;

  public static final String SERIALIZED_NAME_DUE_DATE_RANGE = "due_date_range";
  @SerializedName(SERIALIZED_NAME_DUE_DATE_RANGE)
  private DateRange dueDateRange;

  public static final String SERIALIZED_NAME_PAYMENT_DATE_RANGE = "payment_date_range";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE_RANGE)
  private DateTimeRange paymentDateRange;

  public static final String SERIALIZED_NAME_CREATION_DATE_RANGE = "creation_date_range";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_RANGE)
  private DateTimeRange creationDateRange;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<String> fields = null;

  public SearchData() {
  }

  public SearchData recipientEmail(String recipientEmail) {
    
    
    
    
    this.recipientEmail = recipientEmail;
    return this;
  }

   /**
   * Filters the search by the email address.
   * @return recipientEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filters the search by the email address.")

  public String getRecipientEmail() {
    return recipientEmail;
  }


  public void setRecipientEmail(String recipientEmail) {
    
    
    
    this.recipientEmail = recipientEmail;
  }


  public SearchData recipientFirstName(String recipientFirstName) {
    
    
    
    
    this.recipientFirstName = recipientFirstName;
    return this;
  }

   /**
   * Filters the search by the recipient first name.
   * @return recipientFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filters the search by the recipient first name.")

  public String getRecipientFirstName() {
    return recipientFirstName;
  }


  public void setRecipientFirstName(String recipientFirstName) {
    
    
    
    this.recipientFirstName = recipientFirstName;
  }


  public SearchData recipientLastName(String recipientLastName) {
    
    
    
    
    this.recipientLastName = recipientLastName;
    return this;
  }

   /**
   * Filters the search by the recipient last name.
   * @return recipientLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filters the search by the recipient last name.")

  public String getRecipientLastName() {
    return recipientLastName;
  }


  public void setRecipientLastName(String recipientLastName) {
    
    
    
    this.recipientLastName = recipientLastName;
  }


  public SearchData recipientBusinessName(String recipientBusinessName) {
    
    
    
    
    this.recipientBusinessName = recipientBusinessName;
    return this;
  }

   /**
   * Filters the search by the recipient business name.
   * @return recipientBusinessName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filters the search by the recipient business name.")

  public String getRecipientBusinessName() {
    return recipientBusinessName;
  }


  public void setRecipientBusinessName(String recipientBusinessName) {
    
    
    
    this.recipientBusinessName = recipientBusinessName;
  }


  public SearchData invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Filters the search by the invoice number.
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filters the search by the invoice number.")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public SearchData status(List<InvoiceStatus> status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public SearchData addStatusItem(InvoiceStatus statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * An array of status values.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of status values.")

  public List<InvoiceStatus> getStatus() {
    return status;
  }


  public void setStatus(List<InvoiceStatus> status) {
    
    
    
    this.status = status;
  }


  public SearchData reference(String reference) {
    
    
    
    
    this.reference = reference;
    return this;
  }

   /**
   * The reference data, such as a PO number.
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reference data, such as a PO number.")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    
    
    
    this.reference = reference;
  }


  public SearchData currencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 3.");
    }
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [three-character ISO-4217 currency code](https://raw.githubusercontent.com) that identifies the currency.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 3.");
    }
    this.currencyCode = currencyCode;
  }


  public SearchData memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * A private bookkeeping memo for the user.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A private bookkeeping memo for the user.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public SearchData totalAmountRange(AmountRange totalAmountRange) {
    
    
    
    
    this.totalAmountRange = totalAmountRange;
    return this;
  }

   /**
   * Get totalAmountRange
   * @return totalAmountRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AmountRange getTotalAmountRange() {
    return totalAmountRange;
  }


  public void setTotalAmountRange(AmountRange totalAmountRange) {
    
    
    
    this.totalAmountRange = totalAmountRange;
  }


  public SearchData invoiceDateRange(DateRange invoiceDateRange) {
    
    
    
    
    this.invoiceDateRange = invoiceDateRange;
    return this;
  }

   /**
   * Get invoiceDateRange
   * @return invoiceDateRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DateRange getInvoiceDateRange() {
    return invoiceDateRange;
  }


  public void setInvoiceDateRange(DateRange invoiceDateRange) {
    
    
    
    this.invoiceDateRange = invoiceDateRange;
  }


  public SearchData dueDateRange(DateRange dueDateRange) {
    
    
    
    
    this.dueDateRange = dueDateRange;
    return this;
  }

   /**
   * Get dueDateRange
   * @return dueDateRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DateRange getDueDateRange() {
    return dueDateRange;
  }


  public void setDueDateRange(DateRange dueDateRange) {
    
    
    
    this.dueDateRange = dueDateRange;
  }


  public SearchData paymentDateRange(DateTimeRange paymentDateRange) {
    
    
    
    
    this.paymentDateRange = paymentDateRange;
    return this;
  }

   /**
   * Get paymentDateRange
   * @return paymentDateRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DateTimeRange getPaymentDateRange() {
    return paymentDateRange;
  }


  public void setPaymentDateRange(DateTimeRange paymentDateRange) {
    
    
    
    this.paymentDateRange = paymentDateRange;
  }


  public SearchData creationDateRange(DateTimeRange creationDateRange) {
    
    
    
    
    this.creationDateRange = creationDateRange;
    return this;
  }

   /**
   * Get creationDateRange
   * @return creationDateRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DateTimeRange getCreationDateRange() {
    return creationDateRange;
  }


  public void setCreationDateRange(DateTimeRange creationDateRange) {
    
    
    
    this.creationDateRange = creationDateRange;
  }


  public SearchData archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Indicates whether to list merchant-archived invoices in the response. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. Response lists only merchant-archived invoices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. Response lists only unarchived invoices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;null&lt;/code&gt;. Response lists all invoices.&lt;/li&gt;&lt;/ul&gt;
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to list merchant-archived invoices in the response. Value is:<ul><li><code>true</code>. Response lists only merchant-archived invoices.</li><li><code>false</code>. Response lists only unarchived invoices.</li><li><code>null</code>. Response lists all invoices.</li></ul>")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public SearchData fields(List<String> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public SearchData addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * A CSV file of fields to return for the user, if available. Because the invoice object can be very large, field filtering is required. Valid collection fields are &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;payments&lt;/code&gt;, &lt;code&gt;refunds&lt;/code&gt;, &lt;code&gt;additional_recipients_info&lt;/code&gt;, and &lt;code&gt;attachments&lt;/code&gt;.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A CSV file of fields to return for the user, if available. Because the invoice object can be very large, field filtering is required. Valid collection fields are <code>items</code>, <code>payments</code>, <code>refunds</code>, <code>additional_recipients_info</code>, and <code>attachments</code>.")

  public List<String> getFields() {
    return fields;
  }


  public void setFields(List<String> fields) {
    
    
    
    this.fields = fields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SearchData instance itself
   */
  public SearchData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchData searchData = (SearchData) o;
    return Objects.equals(this.recipientEmail, searchData.recipientEmail) &&
        Objects.equals(this.recipientFirstName, searchData.recipientFirstName) &&
        Objects.equals(this.recipientLastName, searchData.recipientLastName) &&
        Objects.equals(this.recipientBusinessName, searchData.recipientBusinessName) &&
        Objects.equals(this.invoiceNumber, searchData.invoiceNumber) &&
        Objects.equals(this.status, searchData.status) &&
        Objects.equals(this.reference, searchData.reference) &&
        Objects.equals(this.currencyCode, searchData.currencyCode) &&
        Objects.equals(this.memo, searchData.memo) &&
        Objects.equals(this.totalAmountRange, searchData.totalAmountRange) &&
        Objects.equals(this.invoiceDateRange, searchData.invoiceDateRange) &&
        Objects.equals(this.dueDateRange, searchData.dueDateRange) &&
        Objects.equals(this.paymentDateRange, searchData.paymentDateRange) &&
        Objects.equals(this.creationDateRange, searchData.creationDateRange) &&
        Objects.equals(this.archived, searchData.archived) &&
        Objects.equals(this.fields, searchData.fields)&&
        Objects.equals(this.additionalProperties, searchData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipientEmail, recipientFirstName, recipientLastName, recipientBusinessName, invoiceNumber, status, reference, currencyCode, memo, totalAmountRange, invoiceDateRange, dueDateRange, paymentDateRange, creationDateRange, archived, fields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchData {\n");
    sb.append("    recipientEmail: ").append(toIndentedString(recipientEmail)).append("\n");
    sb.append("    recipientFirstName: ").append(toIndentedString(recipientFirstName)).append("\n");
    sb.append("    recipientLastName: ").append(toIndentedString(recipientLastName)).append("\n");
    sb.append("    recipientBusinessName: ").append(toIndentedString(recipientBusinessName)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    totalAmountRange: ").append(toIndentedString(totalAmountRange)).append("\n");
    sb.append("    invoiceDateRange: ").append(toIndentedString(invoiceDateRange)).append("\n");
    sb.append("    dueDateRange: ").append(toIndentedString(dueDateRange)).append("\n");
    sb.append("    paymentDateRange: ").append(toIndentedString(paymentDateRange)).append("\n");
    sb.append("    creationDateRange: ").append(toIndentedString(creationDateRange)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recipient_email");
    openapiFields.add("recipient_first_name");
    openapiFields.add("recipient_last_name");
    openapiFields.add("recipient_business_name");
    openapiFields.add("invoice_number");
    openapiFields.add("status");
    openapiFields.add("reference");
    openapiFields.add("currency_code");
    openapiFields.add("memo");
    openapiFields.add("total_amount_range");
    openapiFields.add("invoice_date_range");
    openapiFields.add("due_date_range");
    openapiFields.add("payment_date_range");
    openapiFields.add("creation_date_range");
    openapiFields.add("archived");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SearchData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchData is not found in the empty JSON string", SearchData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("recipient_email") != null && !jsonObj.get("recipient_email").isJsonNull()) && !jsonObj.get("recipient_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_email").toString()));
      }
      if ((jsonObj.get("recipient_first_name") != null && !jsonObj.get("recipient_first_name").isJsonNull()) && !jsonObj.get("recipient_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_first_name").toString()));
      }
      if ((jsonObj.get("recipient_last_name") != null && !jsonObj.get("recipient_last_name").isJsonNull()) && !jsonObj.get("recipient_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_last_name").toString()));
      }
      if ((jsonObj.get("recipient_business_name") != null && !jsonObj.get("recipient_business_name").isJsonNull()) && !jsonObj.get("recipient_business_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_business_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_business_name").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      // validate the optional field `total_amount_range`
      if (jsonObj.get("total_amount_range") != null && !jsonObj.get("total_amount_range").isJsonNull()) {
        AmountRange.validateJsonObject(jsonObj.getAsJsonObject("total_amount_range"));
      }
      // validate the optional field `invoice_date_range`
      if (jsonObj.get("invoice_date_range") != null && !jsonObj.get("invoice_date_range").isJsonNull()) {
        DateRange.validateJsonObject(jsonObj.getAsJsonObject("invoice_date_range"));
      }
      // validate the optional field `due_date_range`
      if (jsonObj.get("due_date_range") != null && !jsonObj.get("due_date_range").isJsonNull()) {
        DateRange.validateJsonObject(jsonObj.getAsJsonObject("due_date_range"));
      }
      // validate the optional field `payment_date_range`
      if (jsonObj.get("payment_date_range") != null && !jsonObj.get("payment_date_range").isJsonNull()) {
        DateTimeRange.validateJsonObject(jsonObj.getAsJsonObject("payment_date_range"));
      }
      // validate the optional field `creation_date_range`
      if (jsonObj.get("creation_date_range") != null && !jsonObj.get("creation_date_range").isJsonNull()) {
        DateTimeRange.validateJsonObject(jsonObj.getAsJsonObject("creation_date_range"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchData.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchData>() {
           @Override
           public void write(JsonWriter out, SearchData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SearchData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchData
  * @throws IOException if the JSON string is invalid with respect to SearchData
  */
  public static SearchData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchData.class);
  }

 /**
  * Convert an instance of SearchData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

