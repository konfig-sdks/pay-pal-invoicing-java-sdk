/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.InvoiceCreationFlow;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MetadataAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MetadataAllOf {
  public static final String SERIALIZED_NAME_CANCEL_TIME = "cancel_time";
  @SerializedName(SERIALIZED_NAME_CANCEL_TIME)
  private String cancelTime;

  public static final String SERIALIZED_NAME_CANCELLED_BY = "cancelled_by";
  @SerializedName(SERIALIZED_NAME_CANCELLED_BY)
  private String cancelledBy;

  public static final String SERIALIZED_NAME_FIRST_SENT_TIME = "first_sent_time";
  @SerializedName(SERIALIZED_NAME_FIRST_SENT_TIME)
  private String firstSentTime;

  public static final String SERIALIZED_NAME_LAST_SENT_TIME = "last_sent_time";
  @SerializedName(SERIALIZED_NAME_LAST_SENT_TIME)
  private String lastSentTime;

  public static final String SERIALIZED_NAME_LAST_SENT_BY = "last_sent_by";
  @SerializedName(SERIALIZED_NAME_LAST_SENT_BY)
  private String lastSentBy;

  public static final String SERIALIZED_NAME_CREATED_BY_FLOW = "created_by_flow";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_FLOW)
  private InvoiceCreationFlow createdByFlow;

  public static final String SERIALIZED_NAME_RECIPIENT_VIEW_URL = "recipient_view_url";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_VIEW_URL)
  private URI recipientViewUrl;

  public static final String SERIALIZED_NAME_INVOICER_VIEW_URL = "invoicer_view_url";
  @SerializedName(SERIALIZED_NAME_INVOICER_VIEW_URL)
  private URI invoicerViewUrl;

  public MetadataAllOf() {
  }

  
  public MetadataAllOf(
     String cancelledBy, 
     String lastSentBy, 
     URI recipientViewUrl, 
     URI invoicerViewUrl
  ) {
    this();
    this.cancelledBy = cancelledBy;
    this.lastSentBy = lastSentBy;
    this.recipientViewUrl = recipientViewUrl;
    this.invoicerViewUrl = invoicerViewUrl;
  }

  public MetadataAllOf cancelTime(String cancelTime) {
    
    
    if (cancelTime != null && cancelTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for cancelTime. Length must be greater than or equal to 20.");
    }
    
    this.cancelTime = cancelTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return cancelTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>")

  public String getCancelTime() {
    return cancelTime;
  }


  public void setCancelTime(String cancelTime) {
    
    
    if (cancelTime != null && cancelTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for cancelTime. Length must be greater than or equal to 20.");
    }
    this.cancelTime = cancelTime;
  }


   /**
   * The actor who canceled the resource.
   * @return cancelledBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The actor who canceled the resource.")

  public String getCancelledBy() {
    return cancelledBy;
  }




  public MetadataAllOf firstSentTime(String firstSentTime) {
    
    
    if (firstSentTime != null && firstSentTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for firstSentTime. Length must be greater than or equal to 20.");
    }
    
    this.firstSentTime = firstSentTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return firstSentTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>")

  public String getFirstSentTime() {
    return firstSentTime;
  }


  public void setFirstSentTime(String firstSentTime) {
    
    
    if (firstSentTime != null && firstSentTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for firstSentTime. Length must be greater than or equal to 20.");
    }
    this.firstSentTime = firstSentTime;
  }


  public MetadataAllOf lastSentTime(String lastSentTime) {
    
    
    if (lastSentTime != null && lastSentTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for lastSentTime. Length must be greater than or equal to 20.");
    }
    
    this.lastSentTime = lastSentTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return lastSentTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>")

  public String getLastSentTime() {
    return lastSentTime;
  }


  public void setLastSentTime(String lastSentTime) {
    
    
    if (lastSentTime != null && lastSentTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for lastSentTime. Length must be greater than or equal to 20.");
    }
    this.lastSentTime = lastSentTime;
  }


   /**
   * The email address of the account that last sent the resource.
   * @return lastSentBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address of the account that last sent the resource.")

  public String getLastSentBy() {
    return lastSentBy;
  }




  public MetadataAllOf createdByFlow(InvoiceCreationFlow createdByFlow) {
    
    
    
    
    this.createdByFlow = createdByFlow;
    return this;
  }

   /**
   * Get createdByFlow
   * @return createdByFlow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InvoiceCreationFlow getCreatedByFlow() {
    return createdByFlow;
  }


  public void setCreatedByFlow(InvoiceCreationFlow createdByFlow) {
    
    
    
    this.createdByFlow = createdByFlow;
  }


   /**
   * The URL for the invoice payer view hosted on paypal.com.
   * @return recipientViewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL for the invoice payer view hosted on paypal.com.")

  public URI getRecipientViewUrl() {
    return recipientViewUrl;
  }




   /**
   * The URL for the invoice merchant view hosted on paypal.com.
   * @return invoicerViewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL for the invoice merchant view hosted on paypal.com.")

  public URI getInvoicerViewUrl() {
    return invoicerViewUrl;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MetadataAllOf instance itself
   */
  public MetadataAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataAllOf metadataAllOf = (MetadataAllOf) o;
    return Objects.equals(this.cancelTime, metadataAllOf.cancelTime) &&
        Objects.equals(this.cancelledBy, metadataAllOf.cancelledBy) &&
        Objects.equals(this.firstSentTime, metadataAllOf.firstSentTime) &&
        Objects.equals(this.lastSentTime, metadataAllOf.lastSentTime) &&
        Objects.equals(this.lastSentBy, metadataAllOf.lastSentBy) &&
        Objects.equals(this.createdByFlow, metadataAllOf.createdByFlow) &&
        Objects.equals(this.recipientViewUrl, metadataAllOf.recipientViewUrl) &&
        Objects.equals(this.invoicerViewUrl, metadataAllOf.invoicerViewUrl)&&
        Objects.equals(this.additionalProperties, metadataAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelTime, cancelledBy, firstSentTime, lastSentTime, lastSentBy, createdByFlow, recipientViewUrl, invoicerViewUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataAllOf {\n");
    sb.append("    cancelTime: ").append(toIndentedString(cancelTime)).append("\n");
    sb.append("    cancelledBy: ").append(toIndentedString(cancelledBy)).append("\n");
    sb.append("    firstSentTime: ").append(toIndentedString(firstSentTime)).append("\n");
    sb.append("    lastSentTime: ").append(toIndentedString(lastSentTime)).append("\n");
    sb.append("    lastSentBy: ").append(toIndentedString(lastSentBy)).append("\n");
    sb.append("    createdByFlow: ").append(toIndentedString(createdByFlow)).append("\n");
    sb.append("    recipientViewUrl: ").append(toIndentedString(recipientViewUrl)).append("\n");
    sb.append("    invoicerViewUrl: ").append(toIndentedString(invoicerViewUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancel_time");
    openapiFields.add("cancelled_by");
    openapiFields.add("first_sent_time");
    openapiFields.add("last_sent_time");
    openapiFields.add("last_sent_by");
    openapiFields.add("created_by_flow");
    openapiFields.add("recipient_view_url");
    openapiFields.add("invoicer_view_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetadataAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetadataAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataAllOf is not found in the empty JSON string", MetadataAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("cancel_time") != null && !jsonObj.get("cancel_time").isJsonNull()) && !jsonObj.get("cancel_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_time").toString()));
      }
      if ((jsonObj.get("cancelled_by") != null && !jsonObj.get("cancelled_by").isJsonNull()) && !jsonObj.get("cancelled_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelled_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelled_by").toString()));
      }
      if ((jsonObj.get("first_sent_time") != null && !jsonObj.get("first_sent_time").isJsonNull()) && !jsonObj.get("first_sent_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_sent_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_sent_time").toString()));
      }
      if ((jsonObj.get("last_sent_time") != null && !jsonObj.get("last_sent_time").isJsonNull()) && !jsonObj.get("last_sent_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_sent_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_sent_time").toString()));
      }
      if ((jsonObj.get("last_sent_by") != null && !jsonObj.get("last_sent_by").isJsonNull()) && !jsonObj.get("last_sent_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_sent_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_sent_by").toString()));
      }
      if ((jsonObj.get("recipient_view_url") != null && !jsonObj.get("recipient_view_url").isJsonNull()) && !jsonObj.get("recipient_view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_view_url").toString()));
      }
      if ((jsonObj.get("invoicer_view_url") != null && !jsonObj.get("invoicer_view_url").isJsonNull()) && !jsonObj.get("invoicer_view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoicer_view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoicer_view_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataAllOf>() {
           @Override
           public void write(JsonWriter out, MetadataAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MetadataAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetadataAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetadataAllOf
  * @throws IOException if the JSON string is invalid with respect to MetadataAllOf
  */
  public static MetadataAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataAllOf.class);
  }

 /**
  * Convert an instance of MetadataAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

