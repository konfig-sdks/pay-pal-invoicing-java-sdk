/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressDetailsProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
 */
@ApiModel(description = "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddressPortable {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line_1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line_2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_LINE3 = "address_line_3";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE3)
  private String addressLine3;

  public static final String SERIALIZED_NAME_ADMIN_AREA4 = "admin_area_4";
  @SerializedName(SERIALIZED_NAME_ADMIN_AREA4)
  private String adminArea4;

  public static final String SERIALIZED_NAME_ADMIN_AREA3 = "admin_area_3";
  @SerializedName(SERIALIZED_NAME_ADMIN_AREA3)
  private String adminArea3;

  public static final String SERIALIZED_NAME_ADMIN_AREA2 = "admin_area_2";
  @SerializedName(SERIALIZED_NAME_ADMIN_AREA2)
  private String adminArea2;

  public static final String SERIALIZED_NAME_ADMIN_AREA1 = "admin_area_1";
  @SerializedName(SERIALIZED_NAME_ADMIN_AREA1)
  private String adminArea1;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_ADDRESS_DETAILS = "address_details";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DETAILS)
  private AddressDetailsProperty addressDetails;

  public AddressPortable() {
  }

  public AddressPortable addressLine1(String addressLine1) {
    
    
    
    
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * The first line of the address. For example, number or street. For example, &#x60;173 Drury Lane&#x60;. Required for data entry and compliance and risk checks. Must contain the full address.
   * @return addressLine1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.")

  public String getAddressLine1() {
    return addressLine1;
  }


  public void setAddressLine1(String addressLine1) {
    
    
    
    this.addressLine1 = addressLine1;
  }


  public AddressPortable addressLine2(String addressLine2) {
    
    
    
    
    this.addressLine2 = addressLine2;
    return this;
  }

   /**
   * The second line of the address. For example, suite or apartment number.
   * @return addressLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The second line of the address. For example, suite or apartment number.")

  public String getAddressLine2() {
    return addressLine2;
  }


  public void setAddressLine2(String addressLine2) {
    
    
    
    this.addressLine2 = addressLine2;
  }


  public AddressPortable addressLine3(String addressLine3) {
    
    
    
    
    this.addressLine3 = addressLine3;
    return this;
  }

   /**
   * The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as &#x60;next to Walmart&#x60;, or a landmark in an Indian address.
   * @return addressLine3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.")

  public String getAddressLine3() {
    return addressLine3;
  }


  public void setAddressLine3(String addressLine3) {
    
    
    
    this.addressLine3 = addressLine3;
  }


  public AddressPortable adminArea4(String adminArea4) {
    
    
    
    
    this.adminArea4 = adminArea4;
    return this;
  }

   /**
   * The neighborhood, ward, or district. Smaller than &#x60;admin_area_level_3&#x60; or &#x60;sub_locality&#x60;. Value is:&lt;ul&gt;&lt;li&gt;The postal sorting code for Guernsey and many French territories, such as French Guiana.&lt;/li&gt;&lt;li&gt;The fine-grained administrative levels in China.&lt;/li&gt;&lt;/ul&gt;
   * @return adminArea4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>")

  public String getAdminArea4() {
    return adminArea4;
  }


  public void setAdminArea4(String adminArea4) {
    
    
    
    this.adminArea4 = adminArea4;
  }


  public AddressPortable adminArea3(String adminArea3) {
    
    
    
    
    this.adminArea3 = adminArea3;
    return this;
  }

   /**
   * A sub-locality, suburb, neighborhood, or district. Smaller than &#x60;admin_area_level_2&#x60;. Value is:&lt;ul&gt;&lt;li&gt;Brazil. Suburb, bairro, or neighborhood.&lt;/li&gt;&lt;li&gt;India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.&lt;/li&gt;&lt;/ul&gt;
   * @return adminArea3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>")

  public String getAdminArea3() {
    return adminArea3;
  }


  public void setAdminArea3(String adminArea3) {
    
    
    
    this.adminArea3 = adminArea3;
  }


  public AddressPortable adminArea2(String adminArea2) {
    
    
    
    
    this.adminArea2 = adminArea2;
    return this;
  }

   /**
   * A city, town, or village. Smaller than &#x60;admin_area_level_1&#x60;.
   * @return adminArea2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A city, town, or village. Smaller than `admin_area_level_1`.")

  public String getAdminArea2() {
    return adminArea2;
  }


  public void setAdminArea2(String adminArea2) {
    
    
    
    this.adminArea2 = adminArea2;
  }


  public AddressPortable adminArea1(String adminArea1) {
    
    
    
    
    this.adminArea1 = adminArea1;
    return this;
  }

   /**
   * The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, &#x60;CA&#x60; and not &#x60;California&#x60;. Value, by country, is:&lt;ul&gt;&lt;li&gt;UK. A county.&lt;/li&gt;&lt;li&gt;US. A state.&lt;/li&gt;&lt;li&gt;Canada. A province.&lt;/li&gt;&lt;li&gt;Japan. A prefecture.&lt;/li&gt;&lt;li&gt;Switzerland. A kanton.&lt;/li&gt;&lt;/ul&gt;
   * @return adminArea1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>")

  public String getAdminArea1() {
    return adminArea1;
  }


  public void setAdminArea1(String adminArea1) {
    
    
    
    this.adminArea1 = adminArea1;
  }


  public AddressPortable postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public AddressPortable countryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The [two-character ISO 3166-1 code](https://raw.githubusercontent.com) that identifies the country or region.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The country code for Great Britain is &lt;code&gt;GB&lt;/code&gt; and not &lt;code&gt;UK&lt;/code&gt; as used in the top-level domain names for that country. Use the &#x60;C2&#x60; country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.&lt;/blockquote&gt;
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The [two-character ISO 3166-1 code](https://raw.githubusercontent.com) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    this.countryCode = countryCode;
  }


  public AddressPortable addressDetails(AddressDetailsProperty addressDetails) {
    
    
    
    
    this.addressDetails = addressDetails;
    return this;
  }

   /**
   * Get addressDetails
   * @return addressDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressDetailsProperty getAddressDetails() {
    return addressDetails;
  }


  public void setAddressDetails(AddressDetailsProperty addressDetails) {
    
    
    
    this.addressDetails = addressDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddressPortable instance itself
   */
  public AddressPortable putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressPortable addressPortable = (AddressPortable) o;
    return Objects.equals(this.addressLine1, addressPortable.addressLine1) &&
        Objects.equals(this.addressLine2, addressPortable.addressLine2) &&
        Objects.equals(this.addressLine3, addressPortable.addressLine3) &&
        Objects.equals(this.adminArea4, addressPortable.adminArea4) &&
        Objects.equals(this.adminArea3, addressPortable.adminArea3) &&
        Objects.equals(this.adminArea2, addressPortable.adminArea2) &&
        Objects.equals(this.adminArea1, addressPortable.adminArea1) &&
        Objects.equals(this.postalCode, addressPortable.postalCode) &&
        Objects.equals(this.countryCode, addressPortable.countryCode) &&
        Objects.equals(this.addressDetails, addressPortable.addressDetails)&&
        Objects.equals(this.additionalProperties, addressPortable.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, addressLine2, addressLine3, adminArea4, adminArea3, adminArea2, adminArea1, postalCode, countryCode, addressDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressPortable {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressLine3: ").append(toIndentedString(addressLine3)).append("\n");
    sb.append("    adminArea4: ").append(toIndentedString(adminArea4)).append("\n");
    sb.append("    adminArea3: ").append(toIndentedString(adminArea3)).append("\n");
    sb.append("    adminArea2: ").append(toIndentedString(adminArea2)).append("\n");
    sb.append("    adminArea1: ").append(toIndentedString(adminArea1)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    addressDetails: ").append(toIndentedString(addressDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_line_1");
    openapiFields.add("address_line_2");
    openapiFields.add("address_line_3");
    openapiFields.add("admin_area_4");
    openapiFields.add("admin_area_3");
    openapiFields.add("admin_area_2");
    openapiFields.add("admin_area_1");
    openapiFields.add("postal_code");
    openapiFields.add("country_code");
    openapiFields.add("address_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country_code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddressPortable
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddressPortable.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressPortable is not found in the empty JSON string", AddressPortable.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddressPortable.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address_line_1") != null && !jsonObj.get("address_line_1").isJsonNull()) && !jsonObj.get("address_line_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_1").toString()));
      }
      if ((jsonObj.get("address_line_2") != null && !jsonObj.get("address_line_2").isJsonNull()) && !jsonObj.get("address_line_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_2").toString()));
      }
      if ((jsonObj.get("address_line_3") != null && !jsonObj.get("address_line_3").isJsonNull()) && !jsonObj.get("address_line_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_3").toString()));
      }
      if ((jsonObj.get("admin_area_4") != null && !jsonObj.get("admin_area_4").isJsonNull()) && !jsonObj.get("admin_area_4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_area_4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_area_4").toString()));
      }
      if ((jsonObj.get("admin_area_3") != null && !jsonObj.get("admin_area_3").isJsonNull()) && !jsonObj.get("admin_area_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_area_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_area_3").toString()));
      }
      if ((jsonObj.get("admin_area_2") != null && !jsonObj.get("admin_area_2").isJsonNull()) && !jsonObj.get("admin_area_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_area_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_area_2").toString()));
      }
      if ((jsonObj.get("admin_area_1") != null && !jsonObj.get("admin_area_1").isJsonNull()) && !jsonObj.get("admin_area_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_area_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_area_1").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      // validate the optional field `address_details`
      if (jsonObj.get("address_details") != null && !jsonObj.get("address_details").isJsonNull()) {
        AddressDetailsProperty.validateJsonObject(jsonObj.getAsJsonObject("address_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressPortable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressPortable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressPortable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressPortable.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressPortable>() {
           @Override
           public void write(JsonWriter out, AddressPortable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressPortable read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddressPortable instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddressPortable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddressPortable
  * @throws IOException if the JSON string is invalid with respect to AddressPortable
  */
  public static AddressPortable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressPortable.class);
  }

 /**
  * Convert an instance of AddressPortable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

