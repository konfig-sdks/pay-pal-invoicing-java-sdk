/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactNameAddress;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PaymentMethod;
import com.konfigthis.client.model.PaymentType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The payment details of the invoice. Includes payment type, method, date, discount, and transaction type.
 */
@ApiModel(description = "The payment details of the invoice. Includes payment type, method, date, discount, and transaction type.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentDetail {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PaymentType type;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "payment_date";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private String paymentDate;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private PaymentMethod method;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Money amount;

  public static final String SERIALIZED_NAME_SHIPPING_INFO = "shipping_info";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INFO)
  private ContactNameAddress shippingInfo;

  public PaymentDetail() {
  }

  public PaymentDetail type(PaymentType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentType getType() {
    return type;
  }


  public void setType(PaymentType type) {
    
    
    
    this.type = type;
  }


  public PaymentDetail paymentId(String paymentId) {
    
    
    
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * The ID for a PayPal payment transaction. Required for the &#x60;PAYPAL&#x60; payment type.
   * @return paymentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID for a PayPal payment transaction. Required for the `PAYPAL` payment type.")

  public String getPaymentId() {
    return paymentId;
  }


  public void setPaymentId(String paymentId) {
    
    
    
    this.paymentId = paymentId;
  }


  public PaymentDetail paymentDate(String paymentDate) {
    
    
    if (paymentDate != null && paymentDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for paymentDate. Length must be greater than or equal to 10.");
    }
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @return paymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.")

  public String getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(String paymentDate) {
    
    
    if (paymentDate != null && paymentDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for paymentDate. Length must be greater than or equal to 10.");
    }
    this.paymentDate = paymentDate;
  }


  public PaymentDetail method(PaymentMethod method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentMethod getMethod() {
    return method;
  }


  public void setMethod(PaymentMethod method) {
    
    
    
    this.method = method;
  }


  public PaymentDetail note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * A note associated with an external cash or check payment.
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A note associated with an external cash or check payment.")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public PaymentDetail amount(Money amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getAmount() {
    return amount;
  }


  public void setAmount(Money amount) {
    
    
    
    this.amount = amount;
  }


  public PaymentDetail shippingInfo(ContactNameAddress shippingInfo) {
    
    
    
    
    this.shippingInfo = shippingInfo;
    return this;
  }

   /**
   * Get shippingInfo
   * @return shippingInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactNameAddress getShippingInfo() {
    return shippingInfo;
  }


  public void setShippingInfo(ContactNameAddress shippingInfo) {
    
    
    
    this.shippingInfo = shippingInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentDetail instance itself
   */
  public PaymentDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDetail paymentDetail = (PaymentDetail) o;
    return Objects.equals(this.type, paymentDetail.type) &&
        Objects.equals(this.paymentId, paymentDetail.paymentId) &&
        Objects.equals(this.paymentDate, paymentDetail.paymentDate) &&
        Objects.equals(this.method, paymentDetail.method) &&
        Objects.equals(this.note, paymentDetail.note) &&
        Objects.equals(this.amount, paymentDetail.amount) &&
        Objects.equals(this.shippingInfo, paymentDetail.shippingInfo)&&
        Objects.equals(this.additionalProperties, paymentDetail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, paymentId, paymentDate, method, note, amount, shippingInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDetail {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    shippingInfo: ").append(toIndentedString(shippingInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("payment_id");
    openapiFields.add("payment_date");
    openapiFields.add("method");
    openapiFields.add("note");
    openapiFields.add("amount");
    openapiFields.add("shipping_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDetail is not found in the empty JSON string", PaymentDetail.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if ((jsonObj.get("payment_date") != null && !jsonObj.get("payment_date").isJsonNull()) && !jsonObj.get("payment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_date").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      }
      // validate the optional field `shipping_info`
      if (jsonObj.get("shipping_info") != null && !jsonObj.get("shipping_info").isJsonNull()) {
        ContactNameAddress.validateJsonObject(jsonObj.getAsJsonObject("shipping_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDetail>() {
           @Override
           public void write(JsonWriter out, PaymentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentDetail
  * @throws IOException if the JSON string is invalid with respect to PaymentDetail
  */
  public static PaymentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDetail.class);
  }

 /**
  * Convert an instance of PaymentDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

