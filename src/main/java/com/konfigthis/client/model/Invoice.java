/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AmountSummaryDetail;
import com.konfigthis.client.model.InvoiceDetail;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.InvoicerInfo;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.ModelConfiguration;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Payments;
import com.konfigthis.client.model.RecipientInfo;
import com.konfigthis.client.model.Refunds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The invoice details which includes all information of the invoice like items, billing information.
 */
@ApiModel(description = "The invoice details which includes all information of the invoice like items, billing information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Invoice {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InvoiceStatus status;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private InvoiceDetail detail;

  public static final String SERIALIZED_NAME_INVOICER = "invoicer";
  @SerializedName(SERIALIZED_NAME_INVOICER)
  private InvoicerInfo invoicer;

  public static final String SERIALIZED_NAME_PRIMARY_RECIPIENTS = "primary_recipients";
  @SerializedName(SERIALIZED_NAME_PRIMARY_RECIPIENTS)
  private List<RecipientInfo> primaryRecipients = null;

  public static final String SERIALIZED_NAME_ADDITIONAL_RECIPIENTS = "additional_recipients";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECIPIENTS)
  private List<String> additionalRecipients = null;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = null;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private ModelConfiguration _configuration;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private AmountSummaryDetail amount;

  public static final String SERIALIZED_NAME_DUE_AMOUNT = "due_amount";
  @SerializedName(SERIALIZED_NAME_DUE_AMOUNT)
  private Money dueAmount;

  public static final String SERIALIZED_NAME_GRATUITY = "gratuity";
  @SerializedName(SERIALIZED_NAME_GRATUITY)
  private Money gratuity;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private Payments payments;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private Refunds refunds;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<LinkDescription> links = null;

  public Invoice() {
  }

  
  public Invoice(
     String id, 
     String parentId, 
     List<LinkDescription> links
  ) {
    this();
    this.id = id;
    this.parentId = parentId;
    this.links = links;
  }

   /**
   * The ID of the invoice.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the invoice.")

  public String getId() {
    return id;
  }




   /**
   * The parent ID to an invoice that defines the group invoice to which the invoice is related.
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The parent ID to an invoice that defines the group invoice to which the invoice is related.")

  public String getParentId() {
    return parentId;
  }




  public Invoice status(InvoiceStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InvoiceStatus getStatus() {
    return status;
  }


  public void setStatus(InvoiceStatus status) {
    
    
    
    this.status = status;
  }


  public Invoice detail(InvoiceDetail detail) {
    
    
    
    
    this.detail = detail;
    return this;
  }

   /**
   * Get detail
   * @return detail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InvoiceDetail getDetail() {
    return detail;
  }


  public void setDetail(InvoiceDetail detail) {
    
    
    
    this.detail = detail;
  }


  public Invoice invoicer(InvoicerInfo invoicer) {
    
    
    
    
    this.invoicer = invoicer;
    return this;
  }

   /**
   * Get invoicer
   * @return invoicer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InvoicerInfo getInvoicer() {
    return invoicer;
  }


  public void setInvoicer(InvoicerInfo invoicer) {
    
    
    
    this.invoicer = invoicer;
  }


  public Invoice primaryRecipients(List<RecipientInfo> primaryRecipients) {
    
    
    
    
    this.primaryRecipients = primaryRecipients;
    return this;
  }

  public Invoice addPrimaryRecipientsItem(RecipientInfo primaryRecipientsItem) {
    if (this.primaryRecipients == null) {
      this.primaryRecipients = new ArrayList<>();
    }
    this.primaryRecipients.add(primaryRecipientsItem);
    return this;
  }

   /**
   * The billing and shipping information. Includes name, email, address, phone and language.
   * @return primaryRecipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The billing and shipping information. Includes name, email, address, phone and language.")

  public List<RecipientInfo> getPrimaryRecipients() {
    return primaryRecipients;
  }


  public void setPrimaryRecipients(List<RecipientInfo> primaryRecipients) {
    
    
    
    this.primaryRecipients = primaryRecipients;
  }


  public Invoice additionalRecipients(List<String> additionalRecipients) {
    
    
    
    
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public Invoice addAdditionalRecipientsItem(String additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

   /**
   * An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt;
   * @return additionalRecipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Valid values are email addresses in the `additional_recipients` value associated with the invoice.</blockquote>")

  public List<String> getAdditionalRecipients() {
    return additionalRecipients;
  }


  public void setAdditionalRecipients(List<String> additionalRecipients) {
    
    
    
    this.additionalRecipients = additionalRecipients;
  }


  public Invoice items(List<Item> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public Invoice addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * An array of invoice line item information.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of invoice line item information.")

  public List<Item> getItems() {
    return items;
  }


  public void setItems(List<Item> items) {
    
    
    
    this.items = items;
  }


  public Invoice _configuration(ModelConfiguration _configuration) {
    
    
    
    
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelConfiguration getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(ModelConfiguration _configuration) {
    
    
    
    this._configuration = _configuration;
  }


  public Invoice amount(AmountSummaryDetail amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AmountSummaryDetail getAmount() {
    return amount;
  }


  public void setAmount(AmountSummaryDetail amount) {
    
    
    
    this.amount = amount;
  }


  public Invoice dueAmount(Money dueAmount) {
    
    
    
    
    this.dueAmount = dueAmount;
    return this;
  }

   /**
   * Get dueAmount
   * @return dueAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getDueAmount() {
    return dueAmount;
  }


  public void setDueAmount(Money dueAmount) {
    
    
    
    this.dueAmount = dueAmount;
  }


  public Invoice gratuity(Money gratuity) {
    
    
    
    
    this.gratuity = gratuity;
    return this;
  }

   /**
   * Get gratuity
   * @return gratuity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getGratuity() {
    return gratuity;
  }


  public void setGratuity(Money gratuity) {
    
    
    
    this.gratuity = gratuity;
  }


  public Invoice payments(Payments payments) {
    
    
    
    
    this.payments = payments;
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Payments getPayments() {
    return payments;
  }


  public void setPayments(Payments payments) {
    
    
    
    this.payments = payments;
  }


  public Invoice refunds(Refunds refunds) {
    
    
    
    
    this.refunds = refunds;
    return this;
  }

   /**
   * Get refunds
   * @return refunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Refunds getRefunds() {
    return refunds;
  }


  public void setRefunds(Refunds refunds) {
    
    
    
    this.refunds = refunds;
  }


   /**
   * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).")

  public List<LinkDescription> getLinks() {
    return links;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Invoice instance itself
   */
  public Invoice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.parentId, invoice.parentId) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.detail, invoice.detail) &&
        Objects.equals(this.invoicer, invoice.invoicer) &&
        Objects.equals(this.primaryRecipients, invoice.primaryRecipients) &&
        Objects.equals(this.additionalRecipients, invoice.additionalRecipients) &&
        Objects.equals(this.items, invoice.items) &&
        Objects.equals(this._configuration, invoice._configuration) &&
        Objects.equals(this.amount, invoice.amount) &&
        Objects.equals(this.dueAmount, invoice.dueAmount) &&
        Objects.equals(this.gratuity, invoice.gratuity) &&
        Objects.equals(this.payments, invoice.payments) &&
        Objects.equals(this.refunds, invoice.refunds) &&
        Objects.equals(this.links, invoice.links)&&
        Objects.equals(this.additionalProperties, invoice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentId, status, detail, invoicer, primaryRecipients, additionalRecipients, items, _configuration, amount, dueAmount, gratuity, payments, refunds, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    invoicer: ").append(toIndentedString(invoicer)).append("\n");
    sb.append("    primaryRecipients: ").append(toIndentedString(primaryRecipients)).append("\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dueAmount: ").append(toIndentedString(dueAmount)).append("\n");
    sb.append("    gratuity: ").append(toIndentedString(gratuity)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("parent_id");
    openapiFields.add("status");
    openapiFields.add("detail");
    openapiFields.add("invoicer");
    openapiFields.add("primary_recipients");
    openapiFields.add("additional_recipients");
    openapiFields.add("items");
    openapiFields.add("configuration");
    openapiFields.add("amount");
    openapiFields.add("due_amount");
    openapiFields.add("gratuity");
    openapiFields.add("payments");
    openapiFields.add("refunds");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("detail");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Invoice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Invoice.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      // validate the required field `detail`
      InvoiceDetail.validateJsonObject(jsonObj.getAsJsonObject("detail"));
      // validate the optional field `invoicer`
      if (jsonObj.get("invoicer") != null && !jsonObj.get("invoicer").isJsonNull()) {
        InvoicerInfo.validateJsonObject(jsonObj.getAsJsonObject("invoicer"));
      }
      if (jsonObj.get("primary_recipients") != null && !jsonObj.get("primary_recipients").isJsonNull()) {
        JsonArray jsonArrayprimaryRecipients = jsonObj.getAsJsonArray("primary_recipients");
        if (jsonArrayprimaryRecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primary_recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primary_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("primary_recipients").toString()));
          }

          // validate the optional field `primary_recipients` (array)
          for (int i = 0; i < jsonArrayprimaryRecipients.size(); i++) {
            RecipientInfo.validateJsonObject(jsonArrayprimaryRecipients.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additional_recipients") != null && !jsonObj.get("additional_recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("additional_recipients").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        ModelConfiguration.validateJsonObject(jsonObj.getAsJsonObject("configuration"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        AmountSummaryDetail.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      }
      // validate the optional field `due_amount`
      if (jsonObj.get("due_amount") != null && !jsonObj.get("due_amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("due_amount"));
      }
      // validate the optional field `gratuity`
      if (jsonObj.get("gratuity") != null && !jsonObj.get("gratuity").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("gratuity"));
      }
      // validate the optional field `payments`
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        Payments.validateJsonObject(jsonObj.getAsJsonObject("payments"));
      }
      // validate the optional field `refunds`
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        Refunds.validateJsonObject(jsonObj.getAsJsonObject("refunds"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            LinkDescription.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Invoice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Invoice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Invoice
  * @throws IOException if the JSON string is invalid with respect to Invoice
  */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

 /**
  * Convert an instance of Invoice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

