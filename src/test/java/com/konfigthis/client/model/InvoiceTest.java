/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AmountSummaryDetail;
import com.konfigthis.client.model.InvoiceDetail;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.InvoicerInfo;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.ModelConfiguration;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Payments;
import com.konfigthis.client.model.RecipientInfo;
import com.konfigthis.client.model.Refunds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for Invoice
 */
public class InvoiceTest {
    private final Invoice model = new Invoice();

    /**
     * Model tests for Invoice
     */
    @Test
    public void testInvoice() {
        // TODO: test Invoice
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'parentId'
     */
    @Test
    public void parentIdTest() {
        // TODO: test parentId
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'detail'
     */
    @Test
    public void detailTest() {
        // TODO: test detail
    }

    /**
     * Test the property 'invoicer'
     */
    @Test
    public void invoicerTest() {
        // TODO: test invoicer
    }

    /**
     * Test the property 'primaryRecipients'
     */
    @Test
    public void primaryRecipientsTest() {
        // TODO: test primaryRecipients
    }

    /**
     * Test the property 'additionalRecipients'
     */
    @Test
    public void additionalRecipientsTest() {
        // TODO: test additionalRecipients
    }

    /**
     * Test the property 'items'
     */
    @Test
    public void itemsTest() {
        // TODO: test items
    }

    /**
     * Test the property '_configuration'
     */
    @Test
    public void _configurationTest() {
        // TODO: test _configuration
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'dueAmount'
     */
    @Test
    public void dueAmountTest() {
        // TODO: test dueAmount
    }

    /**
     * Test the property 'gratuity'
     */
    @Test
    public void gratuityTest() {
        // TODO: test gratuity
    }

    /**
     * Test the property 'payments'
     */
    @Test
    public void paymentsTest() {
        // TODO: test payments
    }

    /**
     * Test the property 'refunds'
     */
    @Test
    public void refundsTest() {
        // TODO: test refunds
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

}
