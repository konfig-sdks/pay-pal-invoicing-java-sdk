/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AmountRange;
import com.konfigthis.client.model.DateRange;
import com.konfigthis.client.model.DateTimeRange;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.Invoices;
import com.konfigthis.client.model.SearchData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchInvoicesApi
 */
@Disabled
public class SearchInvoicesApiTest {

    private static SearchInvoicesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SearchInvoicesApi(apiClient);
    }

    /**
     * Search for invoices
     *
     * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String recipientEmail = null;
        String recipientFirstName = null;
        String recipientLastName = null;
        String recipientBusinessName = null;
        String invoiceNumber = null;
        List<InvoiceStatus> status = null;
        String reference = null;
        String currencyCode = null;
        String memo = null;
        AmountRange totalAmountRange = null;
        DateRange invoiceDateRange = null;
        DateRange dueDateRange = null;
        DateTimeRange paymentDateRange = null;
        DateTimeRange creationDateRange = null;
        Boolean archived = null;
        List<String> fields = null;
        Integer page = null;
        Integer pageSize = null;
        Boolean totalRequired = null;
        Invoices response = api.list()
                .recipientEmail(recipientEmail)
                .recipientFirstName(recipientFirstName)
                .recipientLastName(recipientLastName)
                .recipientBusinessName(recipientBusinessName)
                .invoiceNumber(invoiceNumber)
                .status(status)
                .reference(reference)
                .currencyCode(currencyCode)
                .memo(memo)
                .totalAmountRange(totalAmountRange)
                .invoiceDateRange(invoiceDateRange)
                .dueDateRange(dueDateRange)
                .paymentDateRange(paymentDateRange)
                .creationDateRange(creationDateRange)
                .archived(archived)
                .fields(fields)
                .page(page)
                .pageSize(pageSize)
                .totalRequired(totalRequired)
                .execute();
        // TODO: test validations
    }

}
