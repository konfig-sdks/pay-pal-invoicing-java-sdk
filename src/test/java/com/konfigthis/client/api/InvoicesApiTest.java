/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AmountSummaryDetail;
import com.konfigthis.client.model.ContactNameAddress;
import com.konfigthis.client.model.Invoice;
import com.konfigthis.client.model.InvoiceDetail;
import com.konfigthis.client.model.InvoiceNumber;
import com.konfigthis.client.model.InvoiceStatus;
import com.konfigthis.client.model.InvoicerInfo;
import com.konfigthis.client.model.Invoices;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.Model202Response;
import com.konfigthis.client.model.ModelConfiguration;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Notification;
import com.konfigthis.client.model.PaymentDetail;
import com.konfigthis.client.model.PaymentMethod;
import com.konfigthis.client.model.PaymentReference;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.Payments;
import com.konfigthis.client.model.QrConfig;
import com.konfigthis.client.model.RecipientInfo;
import com.konfigthis.client.model.RefundDetail;
import com.konfigthis.client.model.RefundReference;
import com.konfigthis.client.model.Refunds;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Disabled
public class InvoicesApiTest {

    private static InvoicesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new InvoicesApi(apiClient);
    }

    /**
     * Cancel sent invoice
     *
     * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSentInvoiceTest() throws ApiException {
        String invoiceId = null;
        String subject = null;
        String note = null;
        Boolean sendToInvoicer = null;
        Boolean sendToRecipient = null;
        List<String> additionalRecipients = null;
        api.cancelSentInvoice(invoiceId)
                .subject(subject)
                .note(note)
                .sendToInvoicer(sendToInvoicer)
                .sendToRecipient(sendToRecipient)
                .additionalRecipients(additionalRecipients)
                .execute();
        // TODO: test validations
    }

    /**
     * Create draft invoice
     *
     * Creates a draft invoice. To move the invoice from a draft to payable state, you must &lt;a href&#x3D;\&quot;#invoices_send\&quot;&gt;send the invoice&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;In the JSON request body, include invoice details including merchant information. The &lt;code&gt;invoice&lt;/code&gt; object must include an &lt;code&gt;items&lt;/code&gt; array.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The merchant that you specify in an invoice must have a PayPal account in good standing.&lt;/blockquote&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDraftInvoiceTest() throws ApiException {
        InvoiceDetail detail = null;
        String id = null;
        String parentId = null;
        InvoiceStatus status = null;
        InvoicerInfo invoicer = null;
        List<RecipientInfo> primaryRecipients = null;
        List<String> additionalRecipients = null;
        List<Item> items = null;
        ModelConfiguration _configuration = null;
        AmountSummaryDetail amount = null;
        Money dueAmount = null;
        Money gratuity = null;
        Payments payments = null;
        Refunds refunds = null;
        List<LinkDescription> links = null;
        Invoice response = api.createDraftInvoice(detail)
                .id(id)
                .parentId(parentId)
                .status(status)
                .invoicer(invoicer)
                .primaryRecipients(primaryRecipients)
                .additionalRecipients(additionalRecipients)
                .items(items)
                ._configuration(_configuration)
                .amount(amount)
                .dueAmount(dueAmount)
                .gratuity(gratuity)
                .payments(payments)
                .refunds(refunds)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete invoice
     *
     * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can &lt;a href&#x3D;\&quot;/docs/api/invoicing/v2/#invoices_cancel\&quot;&gt;cancel the invoice&lt;/a&gt;. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDraftOrScheduledInvoiceTest() throws ApiException {
        String invoiceId = null;
        api.deleteDraftOrScheduledInvoice(invoiceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete external payment
     *
     * Deletes an external payment, by invoice ID and transaction ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExternalPaymentTest() throws ApiException {
        String invoiceId = null;
        String transactionId = null;
        api.deleteExternalPayment(invoiceId, transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete external refund
     *
     * Deletes an external refund, by invoice ID and transaction ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExternalRefundTest() throws ApiException {
        String invoiceId = null;
        String transactionId = null;
        api.deleteExternalRefund(invoiceId, transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate invoice number
     *
     * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after &#x60;INVOICE-1234&#x60; is &#x60;INVOICE-1235&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateNextInvoiceNumberTest() throws ApiException {
        InvoiceNumber response = api.generateNextInvoiceNumber()
                .execute();
        // TODO: test validations
    }

    /**
     * Generate QR code
     *
     * Generates a QR code for an invoice, by ID. The QR code is a PNG image in &lt;a href&#x3D;\&quot;https://www.base64encode.org/\&quot;&gt;Base64-encoded&lt;/a&gt; format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must &lt;a href&#x3D;\&quot;#invoices_create\&quot;&gt;create an invoice&lt;/a&gt; and &lt;a href&#x3D;\&quot;#invoices_send\&quot;&gt;send an invoice&lt;/a&gt; to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateQrCodeTest() throws ApiException {
        String invoiceId = null;
        Integer width = null;
        Integer height = null;
        String action = null;
        api.generateQrCode(invoiceId)
                .width(width)
                .height(height)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Show invoice details
     *
     * Shows details for an invoice, by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String invoiceId = null;
        Invoice response = api.getDetails(invoiceId)
                .execute();
        // TODO: test validations
    }

    /**
     * List invoices
     *
     * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        Boolean totalRequired = null;
        String fields = null;
        Invoices response = api.getInvoices()
                .page(page)
                .pageSize(pageSize)
                .totalRequired(totalRequired)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Record payment for invoice
     *
     * Records a payment for the invoice. If no payment is due, the invoice is marked as &#x60;PAID&#x60;. Otherwise, the invoice is marked as &#x60;PARTIALLY PAID&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordPaymentTest() throws ApiException {
        PaymentMethod method = null;
        String invoiceId = null;
        PaymentType type = null;
        String paymentId = null;
        String paymentDate = null;
        String note = null;
        Money amount = null;
        ContactNameAddress shippingInfo = null;
        PaymentReference response = api.recordPayment(method, invoiceId)
                .type(type)
                .paymentId(paymentId)
                .paymentDate(paymentDate)
                .note(note)
                .amount(amount)
                .shippingInfo(shippingInfo)
                .execute();
        // TODO: test validations
    }

    /**
     * Record refund for invoice
     *
     * Records a refund for the invoice. If all payments are refunded, the invoice is marked as &#x60;REFUNDED&#x60;. Otherwise, the invoice is marked as &#x60;PARTIALLY REFUNDED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordRefundTest() throws ApiException {
        PaymentMethod method = null;
        String invoiceId = null;
        PaymentType type = null;
        String refundId = null;
        String refundDate = null;
        Money amount = null;
        RefundReference response = api.recordRefund(method, invoiceId)
                .type(type)
                .refundId(refundId)
                .refundDate(refundDate)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * Send invoice
     *
     * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:&lt;ul&gt;&lt;li&gt;If the invoice issue date is current or in the past, sends the invoice immediately.&lt;/li&gt;&lt;li&gt;If the invoice issue date is in the future, schedules the invoice to be sent on that date.&lt;/li&gt;&lt;/ul&gt;To suppress the merchant&#39;s email notification, set the &#x60;send_to_invoicer&#x60; body parameter to &#x60;false&#x60;. To send the invoice through a share link and not through PayPal, set the &lt;code&gt;send_to_recipient&lt;/code&gt; parameter to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;notification&lt;/code&gt; object. The &lt;code&gt;send_to_recipient&lt;/code&gt; parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.&lt;blockquote&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;After you send an invoice, resending it has no effect.&lt;/li&gt;&lt;li&gt;To send a notification for updates, &lt;a href&#x3D;\&quot;#invoices_update\&quot;&gt;update the invoice&lt;/a&gt; and set the &lt;code&gt;send_to_recipient&lt;/code&gt; body parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendInvoiceTest() throws ApiException {
        String invoiceId = null;
        String subject = null;
        String note = null;
        Boolean sendToInvoicer = null;
        Boolean sendToRecipient = null;
        List<String> additionalRecipients = null;
        LinkDescription response = api.sendInvoice(invoiceId)
                .subject(subject)
                .note(note)
                .sendToInvoicer(sendToInvoicer)
                .sendToRecipient(sendToRecipient)
                .additionalRecipients(additionalRecipients)
                .execute();
        // TODO: test validations
    }

    /**
     * Send invoice reminder
     *
     * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a &#x60;notification&#x60; object that defines the subject of the reminder and other details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReminderTest() throws ApiException {
        String invoiceId = null;
        String subject = null;
        String note = null;
        Boolean sendToInvoicer = null;
        Boolean sendToRecipient = null;
        List<String> additionalRecipients = null;
        api.sendReminder(invoiceId)
                .subject(subject)
                .note(note)
                .sendToInvoicer(sendToInvoicer)
                .sendToRecipient(sendToRecipient)
                .additionalRecipients(additionalRecipients)
                .execute();
        // TODO: test validations
    }

    /**
     * Fully update invoice
     *
     * Fully updates an invoice, by ID. In the JSON request body, include a complete &#x60;invoice&#x60; object. This call does not support partial updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFullInvoiceTest() throws ApiException {
        InvoiceDetail detail = null;
        String invoiceId = null;
        String id = null;
        String parentId = null;
        InvoiceStatus status = null;
        InvoicerInfo invoicer = null;
        List<RecipientInfo> primaryRecipients = null;
        List<String> additionalRecipients = null;
        List<Item> items = null;
        ModelConfiguration _configuration = null;
        AmountSummaryDetail amount = null;
        Money dueAmount = null;
        Money gratuity = null;
        Payments payments = null;
        Refunds refunds = null;
        List<LinkDescription> links = null;
        Boolean sendToRecipient = null;
        Boolean sendToInvoicer = null;
        Invoice response = api.updateFullInvoice(detail, invoiceId)
                .id(id)
                .parentId(parentId)
                .status(status)
                .invoicer(invoicer)
                .primaryRecipients(primaryRecipients)
                .additionalRecipients(additionalRecipients)
                .items(items)
                ._configuration(_configuration)
                .amount(amount)
                .dueAmount(dueAmount)
                .gratuity(gratuity)
                .payments(payments)
                .refunds(refunds)
                .links(links)
                .sendToRecipient(sendToRecipient)
                .sendToInvoicer(sendToInvoicer)
                .execute();
        // TODO: test validations
    }

}
