/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LinkDescription;
import com.konfigthis.client.model.Template;
import com.konfigthis.client.model.TemplateInfo;
import com.konfigthis.client.model.TemplateSettings;
import com.konfigthis.client.model.Templates;
import com.konfigthis.client.model.UnitOfMeasure;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Disabled
public class TemplatesApiTest {

    private static TemplatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TemplatesApi(apiClient);
    }

    /**
     * Create template
     *
     * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes &#x60;Quantity&#x60;, &#x60;Hours&#x60;, and &#x60;Amount&#x60;.&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        String id = null;
        String name = null;
        Boolean defaultTemplate = null;
        TemplateInfo templateInfo = null;
        TemplateSettings settings = null;
        UnitOfMeasure unitOfMeasure = null;
        Boolean standardTemplate = null;
        List<LinkDescription> links = null;
        Template response = api.createTemplate()
                .id(id)
                .name(name)
                .defaultTemplate(defaultTemplate)
                .templateInfo(templateInfo)
                .settings(settings)
                .unitOfMeasure(unitOfMeasure)
                .standardTemplate(standardTemplate)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete template
     *
     * Deletes a template, by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String templateId = null;
        api.deleteById(templateId)
                .execute();
        // TODO: test validations
    }

    /**
     * List templates
     *
     * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user&#39;s PayPal profile.&lt;br/&gt;The user can select which values to show in the business information section of their template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDetailsTest() throws ApiException {
        String fields = null;
        Integer page = null;
        Integer pageSize = null;
        Templates response = api.listDetails()
                .fields(fields)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Show template details
     *
     * Shows details for a template, by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showDetailsByIdTest() throws ApiException {
        String templateId = null;
        Template response = api.showDetailsById(templateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fully update template
     *
     * Fully updates a template, by ID. In the JSON request body, include a complete &#x60;template&#x60; object. This call does not support partial updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFullTemplateTest() throws ApiException {
        String templateId = null;
        String id = null;
        String name = null;
        Boolean defaultTemplate = null;
        TemplateInfo templateInfo = null;
        TemplateSettings settings = null;
        UnitOfMeasure unitOfMeasure = null;
        Boolean standardTemplate = null;
        List<LinkDescription> links = null;
        Template response = api.updateFullTemplate(templateId)
                .id(id)
                .name(name)
                .defaultTemplate(defaultTemplate)
                .templateInfo(templateInfo)
                .settings(settings)
                .unitOfMeasure(unitOfMeasure)
                .standardTemplate(standardTemplate)
                .links(links)
                .execute();
        // TODO: test validations
    }

}
